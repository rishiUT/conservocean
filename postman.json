{
	"info": {
		"_postman_id": "5cb09ad6-1883-46e8-8573-aae7b9ae3488",
		"name": "ConservOcean API",
		"description": "This API's endpoints are seperated into 3 sections: fish, bodies of water, and human impacts.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Fish",
			"item": [
				{
					"name": "Get all Fish",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a88cf04c-c2a9-4447-8185-775687390199",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    const keys = ['id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend','average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'location', 'human_impact_ids'];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(2);",
									"});",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?limit=2&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "Maximum number of fish to return\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Which index to start querying from"
								}
							]
						},
						"description": "Returns all the fish instances avaliable. You can specify the limit (the maximum number to return) and offset (the index to start query from) query parameters to refine the return. If no limit or offset defined then return all of the fish instances."
					},
					"response": [
						{
							"name": "Get all Fish With Limit and Offset",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?limit=2&offset=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Maximum number of fish you want to return"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Which index to start querying at"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "4920"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 18:38:43 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 776,\n    \"total_fish_returned\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"location\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"Biscayne Bay\"\n                },\n                {\n                    \"id\": 2,\n                    \"name\": \"Honolua Bay\"\n                }\n            ],\n            \"human_impact_ids\": {\n                \"plastic_pollution\": [\n                    23,\n                    12,\n                    24,\n                    25,\n                    22,\n                    26,\n                    13,\n                    27,\n                    14,\n                    40,\n                    41,\n                    28,\n                    15,\n                    29,\n                    16,\n                    32,\n                    17,\n                    31,\n                    18,\n                    19,\n                    34,\n                    35,\n                    20,\n                    21\n                ],\n                \"coal_power_plants\": [],\n                \"offshore_oil_spills\": [],\n                \"tanker_oil_spill\": []\n            }\n        },\n        {\n            \"id\": 2,\n            \"scientific_name\": \"Abudefduf abdominalis\",\n            \"common_name\": \"Green damselfish\",\n            \"species\": \"abdominalis\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 30,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Ababd_u0.jpg\",\n            \"description\": \"Found in quiet waters with rocky bottoms in inshore and offshore reefs; juveniles sometimes found in surge pools (Ref. 205).  Benthopelagic (Ref. 58302).  Adults form school.  Feed on a variety of algae and zooplankton.  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).  Used as food by the Hawaiians (Ref. 7364).\",\n            \"speccode\": 6652,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"location\": [\n                {\n                    \"id\": 3,\n                    \"name\": \"Kaneohe Bay\"\n                },\n                {\n                    \"id\": 4,\n                    \"name\": \"Hanauma Bay\"\n                },\n                {\n                    \"id\": 5,\n                    \"name\": \"Paiko Lagoon\"\n                },\n                {\n                    \"id\": 6,\n                    \"name\": \"Sharks cove\"\n                }\n            ],\n            \"human_impact_ids\": {\n                \"plastic_pollution\": [\n                    23,\n                    12,\n                    24,\n                    25,\n                    22,\n                    26,\n                    13,\n                    27,\n                    14,\n                    40,\n                    41,\n                    28,\n                    15,\n                    29,\n                    16,\n                    32,\n                    17,\n                    31,\n                    18,\n                    19,\n                    34,\n                    35,\n                    20,\n                    21,\n                    36,\n                    37,\n                    39,\n                    42,\n                    33\n                ],\n                \"coal_power_plants\": [],\n                \"offshore_oil_spills\": [],\n                \"tanker_oil_spill\": []\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b23d0e2-afab-448c-a776-d78d5f25d995",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"type": "string",
									"description": "Id of the specific fish you want to return"
								}
							]
						},
						"description": "Get a fish by the specified ID passed into with the id path parameter."
					},
					"response": [
						{
							"name": "Get Fish By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string",
											"description": "Id of the specific fish you want to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "2464"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 19:25:49 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"location\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"Biscayne Bay\"\n                },\n                {\n                    \"id\": 2,\n                    \"name\": \"Honolua Bay\"\n                }\n            ],\n            \"human_impact_ids\": {\n                \"plastic_pollution\": [\n                    23,\n                    12,\n                    24,\n                    25,\n                    22,\n                    26,\n                    13,\n                    27,\n                    14,\n                    40,\n                    41,\n                    28,\n                    15,\n                    29,\n                    16,\n                    32,\n                    17,\n                    31,\n                    18,\n                    19,\n                    34,\n                    35,\n                    20,\n                    21\n                ],\n                \"coal_power_plants\": [],\n                \"offshore_oil_spills\": [],\n                \"tanker_oil_spills\": []\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Common Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f44f981a-dad4-47af-b266-23b8aa4daf03",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?common_name=Flat needlefish",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "common_name",
									"value": "Flat needlefish",
									"description": "The common name of the fish you want to query for"
								}
							]
						},
						"description": "Returns the fish associated with the common_name query parameter"
					},
					"response": [
						{
							"name": "Get Fish By Common Name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?common_name=Flat needlefish",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "common_name",
											"value": "Flat needlefish",
											"description": "The common name of the fish you want to query for"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "2745"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 19:30:35 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 836,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        [\n            {\n                \"id\": 1,\n                \"scientific_name\": \"Ablennes hians\",\n                \"common_name\": \"Flat needlefish\",\n                \"species\": \"hians\",\n                \"genus\": \"Ablennes\",\n                \"family\": \"No Family\",\n                \"habitat\": \"0 -1 -1\",\n                \"endanger_status\": \"LC\",\n                \"population_trend\": \"Unknown\",\n                \"average_size\": 140,\n                \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n                \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n                \"speccode\": 972,\n                \"catch_year\": \"2018\",\n                \"catch_rate\": 22,\n                \"location\": [\n                    {\n                        \"id\": 1,\n                        \"name\": \"Biscayne Bay\"\n                    },\n                    {\n                        \"id\": 2,\n                        \"name\": \"Honolua Bay\"\n                    }\n                ],\n                \"human_impact_ids\": {\n                    \"plastic_pollution\": [\n                        23,\n                        12,\n                        24,\n                        25,\n                        22,\n                        26,\n                        13,\n                        27,\n                        14,\n                        40,\n                        41,\n                        28,\n                        15,\n                        29,\n                        16,\n                        32,\n                        17,\n                        31,\n                        18,\n                        19,\n                        34,\n                        35,\n                        20,\n                        21\n                    ],\n                    \"coal_power_plants\": [],\n                    \"offshore_oil_spills\": [],\n                    \"tanker_oil_spills\": []\n                }\n            }\n        ]\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Species",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5808078b-a8cd-4aa1-a0c6-6a1a1acb2efa",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?species=hians",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "species",
									"value": "hians",
									"description": "The name of the species of fish you want to query for\n"
								}
							]
						},
						"description": "Returns the fish that matches the species query parameter"
					},
					"response": [
						{
							"name": "Get Fish By Species",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?species=hians",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "species",
											"value": "hians",
											"description": "The name of the species of fish you want to query for\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "2493"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 19:40:12 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 847,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"location\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"Biscayne Bay\"\n                },\n                {\n                    \"id\": 2,\n                    \"name\": \"Honolua Bay\"\n                }\n            ],\n            \"human_impact_ids\": {\n                \"plastic_pollution\": [\n                    23,\n                    12,\n                    24,\n                    25,\n                    22,\n                    26,\n                    13,\n                    27,\n                    14,\n                    40,\n                    41,\n                    28,\n                    15,\n                    29,\n                    16,\n                    32,\n                    17,\n                    31,\n                    18,\n                    19,\n                    34,\n                    35,\n                    20,\n                    21\n                ],\n                \"coal_power_plants\": [],\n                \"offshore_oil_spills\": [],\n                \"tanker_oil_spills\": []\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Endangered Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be76fe8f-69f5-4825-a89f-ea97476d4a86",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?status=LC&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "status",
									"value": "LC",
									"description": "The IUCN category status to query fish for.\n"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Returns all the fish that have the status of one of the below categories passed in with the status query parameter.\n<br>\n<br>IUCN Red List Categories available at this link: https://iucn-csg.org/red-list-categories/\n<br>\n<br>EXTINCT (EX)\n<br>EXTINCT IN THE WILD (EW)\n<br> CRITICALLY ENDANGERED (CR)\n<br> ENDANGERED (EN)\n<br> VULNERABLE (VU)\n<br> NEAR THREATENED (NT)\n<br> LEAST CONCERN (LC)\n<br> DATA DEFICIENT (DD)\n<br> NOT EVALUATED (NE)"
					},
					"response": [
						{
							"name": "Get Fish By Endangered Status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?status=LC",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "status",
											"value": "LC",
											"description": "The IUCN category status to query fishes for.\n"
										}
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n\"total_fish_count\": 519,\n\"total_fish_returned\": 1,\n\"data\": [\n{\n    \"id\": 1,\n    \"scientific_name\": \"Ablennes hians\",\n    \"common_name\": \"Flat needlefish\",\n    \"species\": \"hians\",\n    \"genus\": \"Ablennes\",\n    \"family\": \"No Family\",\n    \"habitat\": \"0 -1 -1\",\n    \"endanger_status\": \"LC\",\n    \"population_trend\": \"Unknown\",\n    \"average_size\": 140,\n    \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n    \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n    \"speccode\": 972,\n    \"catch_year\": \"2018\",\n    \"catch_rate\": 22,\n\"location\": [\n    {\n        \"id\": 1,\n        \"name\": \"Biscayne Bay\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Honolua Bay\"\n    }\n],\n    \"human_impact_ids\": {\n        \"plastic_pollution\": [],\n        \"coal_power_plants\": [],\n        \"offshore_oil_spills\": [],\n        \"tanker_oil_spill\": []\n    }\n}]\n}"
						},
						{
							"name": "Get Fish By Endangered Status Error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?status=iucn_category",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "status",
											"value": "iucn_category",
											"description": "The IUCN category status to query fishes for.\n"
										}
									]
								}
							},
							"code": 404,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n    \"error\": \"Invalid Status\"\n}"
						}
					]
				}
			],
			"description": "Fish related queries/request\n\n**Description of Return Types**\n\n\"total_fish_count\" = total number of fishes in database\n\n\"total_fish_returned\" = total number of instances returned\n\n\"id\" = the id of the fish\n\n\"scientific_name\" = scientific name of the fish,\n\n\"common_name\" = common name of the fish\n\n\"species\" = specie of the fish\n\n\"genus\" = genus of the fish\n\n\"family\" = family of the fish\n\n\"habitat\" = String of 3 numbers:\n           (-1 0 0: Freshwater fish)\n           ( 0 -1 0: Brackish fish)\n           (0 0 -1: Saltwater fish)\n           (Can be a combination of those values to show it lives in more than one type of water)\n           ie: \"0 -1 -1\" (means both brackish and saltwater)\n\n\"endanger_status\" = endanger status given by IUCN, look below for more information\n\n\"population_trend\" = Unknown, Stable, Increasing, Decreasing\n\n\"average_size\" = average size of the fish in meters\n\n\"picture_url\" = url to the picture of the fish\n\n\"description\": = short description of the fish,\n\n\"speccode\": = code to identify the fish (used for backend purpose)\n\n\"catch_year\" = year the catch rate data was recorded\n\n\"catch_rate\" = catch rate of fish (total landings) \n\n\"location\" = array of location ids that are related to this fish\n\n\"human_impact_ids\" = dictionary of arrays of ids that are related to fish.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5e87e019-cb1c-4da9-b834-f8f560144238",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "504f153b-ff78-4fee-9941-af6e8e4d3cc6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.any.keys('total_fish_returned', 'data');",
							"});",
							"pm.test(\"Check Data in Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'location', 'human_impact_ids')",
							"});",
							"",
							"",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bodies of Water",
			"item": [
				{
					"name": "Get all Bodies of Water",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea0a7515-d556-433b-a32f-8dacd0d812a7",
								"exec": [
									"pm.test(\"Check Data Values in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Biscayne Bay')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(2);\r",
									"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?limit=2&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "Total number of water entries to return"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Index to start the search from"
								}
							]
						},
						"description": "Return all the instances of bodies of water we have avaliable."
					},
					"response": [
						{
							"name": "Get all Bodies of Water",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?limit=2&offset=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Total number of water entries to return"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Index to start the search from"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "6079"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:13:44 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 240,\n    \"total_water_returned\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Biscayne Bay\",\n            \"type\": \"Bay\",\n            \"latitude\": 26,\n            \"longitude\": -80,\n            \"min_latitude\": 25,\n            \"min_longitude\": -80,\n            \"max_latitude\": 26,\n            \"max_longitude\": -80,\n            \"water_temp\": null,\n            \"tide_height\": null,\n            \"size\": 2863,\n            \"fish\": [\n                1,\n                5,\n                8,\n                12,\n                13,\n                17,\n                20,\n                23,\n                26,\n                45,\n                51,\n                54,\n                57,\n                60,\n                61,\n                69,\n                72,\n                73,\n                78,\n                98,\n                99,\n                102,\n                113,\n                114,\n                115,\n                120,\n                124,\n                135,\n                136,\n                137,\n                139,\n                148,\n                151,\n                152,\n                154,\n                156,\n                157,\n                158,\n                159,\n                170,\n                171,\n                172,\n                175,\n                181,\n                207,\n                208,\n                212,\n                215,\n                223,\n                238,\n                240,\n                248,\n                250,\n                259,\n                260,\n                266,\n                284,\n                285,\n                291,\n                293,\n                294,\n                299,\n                314,\n                325,\n                329,\n                332,\n                343,\n                344,\n                346,\n                350,\n                377,\n                380,\n                384,\n                387,\n                389,\n                400,\n                407,\n                409,\n                411,\n                412,\n                419,\n                424,\n                445,\n                449,\n                450,\n                452,\n                461,\n                468,\n                485,\n                495,\n                508,\n                512,\n                514,\n                523,\n                524,\n                527,\n                531,\n                532,\n                548,\n                550,\n                556,\n                560,\n                561,\n                587,\n                588,\n                593,\n                595,\n                598,\n                606,\n                607,\n                625,\n                628,\n                629,\n                630,\n                631,\n                632,\n                641,\n                644,\n                667,\n                670,\n                671,\n                695,\n                696,\n                700,\n                701,\n                702,\n                703,\n                705,\n                718,\n                719,\n                723,\n                724,\n                726,\n                728,\n                733,\n                734,\n                735,\n                736,\n                743,\n                745,\n                746,\n                753,\n                755,\n                756,\n                771,\n                772,\n                773,\n                776,\n                780,\n                787,\n                793,\n                802,\n                813,\n                815,\n                816,\n                826,\n                831,\n                837,\n                843,\n                846,\n                849,\n                861,\n                869,\n                870,\n                873,\n                876\n            ],\n            \"human_impact_ids\": []\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Honolua Bay\",\n            \"type\": \"Bay\",\n            \"latitude\": 21,\n            \"longitude\": -157,\n            \"min_latitude\": 21,\n            \"min_longitude\": -157,\n            \"max_latitude\": 21,\n            \"max_longitude\": -157,\n            \"water_temp\": null,\n            \"tide_height\": null,\n            \"size\": 66,\n            \"fish\": [\n                1,\n                7,\n                10,\n                21,\n                32,\n                37,\n                38,\n                40,\n                105,\n                106,\n                129,\n                138,\n                184,\n                185,\n                187,\n                197,\n                210,\n                224,\n                278,\n                295,\n                313,\n                343,\n                348,\n                351,\n                354,\n                356,\n                366,\n                397,\n                425,\n                429,\n                446,\n                464,\n                479,\n                480,\n                483,\n                487,\n                492,\n                505,\n                527,\n                568,\n                584,\n                611,\n                621,\n                658,\n                661,\n                685,\n                706,\n                714,\n                749,\n                784,\n                803,\n                829,\n                874\n            ],\n            \"human_impact_ids\": [\n                23,\n                12,\n                24,\n                25,\n                22,\n                26,\n                13,\n                27,\n                14,\n                40,\n                41,\n                28,\n                15,\n                29,\n                16,\n                32,\n                17,\n                31,\n                18,\n                19,\n                34,\n                35,\n                20,\n                21\n            ]\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee3d0d2c-d654-4c7d-9e6d-019928b4eba9",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Biscayne Bay')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"type": "string",
									"description": "Id entry of the water (integer)"
								}
							]
						},
						"description": "Return a body of water with the given id"
					},
					"response": [
						{
							"name": "Get Body of Water by Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string",
											"description": "Id entry of the water (integer)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "3985"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:14:19 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Biscayne Bay\",\n            \"type\": \"Bay\",\n            \"latitude\": 26,\n            \"longitude\": -80,\n            \"min_latitude\": 25,\n            \"min_longitude\": -80,\n            \"max_latitude\": 26,\n            \"max_longitude\": -80,\n            \"water_temp\": null,\n            \"tide_height\": null,\n            \"size\": 2863,\n            \"fish\": [\n                1,\n                5,\n                8,\n                12,\n                13,\n                17,\n                20,\n                23,\n                26,\n                45,\n                51,\n                54,\n                57,\n                60,\n                61,\n                69,\n                72,\n                73,\n                78,\n                98,\n                99,\n                102,\n                113,\n                114,\n                115,\n                120,\n                124,\n                135,\n                136,\n                137,\n                139,\n                148,\n                151,\n                152,\n                154,\n                156,\n                157,\n                158,\n                159,\n                170,\n                171,\n                172,\n                175,\n                181,\n                207,\n                208,\n                212,\n                215,\n                223,\n                238,\n                240,\n                248,\n                250,\n                259,\n                260,\n                266,\n                284,\n                285,\n                291,\n                293,\n                294,\n                299,\n                314,\n                325,\n                329,\n                332,\n                343,\n                344,\n                346,\n                350,\n                377,\n                380,\n                384,\n                387,\n                389,\n                400,\n                407,\n                409,\n                411,\n                412,\n                419,\n                424,\n                445,\n                449,\n                450,\n                452,\n                461,\n                468,\n                485,\n                495,\n                508,\n                512,\n                514,\n                523,\n                524,\n                527,\n                531,\n                532,\n                548,\n                550,\n                556,\n                560,\n                561,\n                587,\n                588,\n                593,\n                595,\n                598,\n                606,\n                607,\n                625,\n                628,\n                629,\n                630,\n                631,\n                632,\n                641,\n                644,\n                667,\n                670,\n                671,\n                695,\n                696,\n                700,\n                701,\n                702,\n                703,\n                705,\n                718,\n                719,\n                723,\n                724,\n                726,\n                728,\n                733,\n                734,\n                735,\n                736,\n                743,\n                745,\n                746,\n                753,\n                755,\n                756,\n                771,\n                772,\n                773,\n                776,\n                780,\n                787,\n                793,\n                802,\n                813,\n                815,\n                816,\n                826,\n                831,\n                837,\n                843,\n                846,\n                849,\n                861,\n                869,\n                870,\n                873,\n                876\n            ],\n            \"human_impact_ids\": []\n        }\n    ]\n}"
						},
						{
							"name": "Get Body of Water by Id Error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water/1?bad_key=bad_input",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water",
										"1"
									],
									"query": [
										{
											"key": "bad_key",
											"value": "bad_input"
										}
									]
								}
							},
							"code": 404,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\r\n    \"error\": \"Bad Input\"\r\n}"
						},
						{
							"name": "Get Body of Water by Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water/10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water",
										"10"
									]
								}
							},
							"code": 200,
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\r\n    data: {\r\n        id: 10,\r\n        name: \"Pago Bay\",\r\n        type: \"Bay\",\r\n        latitude: 13,\r\n        longitude: 145,\r\n        min_latitude: 13,\r\n        min_longitude: 145,\r\n        max_latitude: 13,\r\n        max_longitude: 145,\r\n        water_temp: null,\r\n        tide_height: null,\r\n        size: 173,\r\n        fish: [\r\n            6,\r\n            19,\r\n            22,\r\n            42,\r\n            65,\r\n            70,\r\n            71,\r\n            74,\r\n            100,\r\n            101,\r\n            102,\r\n            110,\r\n            127,\r\n            132,\r\n            160,\r\n            189,\r\n            191,\r\n            193,\r\n            201,\r\n            218,\r\n            226,\r\n            246,\r\n            247,\r\n            249,\r\n            270,\r\n            271,\r\n            274,\r\n            275,\r\n            277,\r\n            316,\r\n            336,\r\n            345,\r\n            352,\r\n            359,\r\n            365,\r\n            383,\r\n            388,\r\n            426,\r\n            437,\r\n            446,\r\n            457,\r\n            470,\r\n            471,\r\n            478,\r\n            501\r\n        ],\r\n        human_impact_ids: [ ]\r\n    }\r\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7139c77-31f2-4724-9880-6955d53f8498",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Biscayne Bay')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?type=Bay&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "type",
									"value": "Bay",
									"description": "Type of body of water (String)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Total number of water entries to return"
								}
							]
						},
						"description": "Returns all bodies of water of a given type (ocean, sea, ect)"
					},
					"response": [
						{
							"name": "Get Body of Water by Type",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?type=Bay&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "type",
											"value": "Bay",
											"description": "Type of body of water (String)"
										},
										{
											"key": "limit",
											"value": "1",
											"description": "Total number of water entries to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "4015"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:14:46 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 240,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Biscayne Bay\",\n            \"type\": \"Bay\",\n            \"latitude\": 26,\n            \"longitude\": -80,\n            \"min_latitude\": 25,\n            \"min_longitude\": -80,\n            \"max_latitude\": 26,\n            \"max_longitude\": -80,\n            \"water_temp\": null,\n            \"tide_height\": null,\n            \"size\": 2863,\n            \"fish\": [\n                1,\n                5,\n                8,\n                12,\n                13,\n                17,\n                20,\n                23,\n                26,\n                45,\n                51,\n                54,\n                57,\n                60,\n                61,\n                69,\n                72,\n                73,\n                78,\n                98,\n                99,\n                102,\n                113,\n                114,\n                115,\n                120,\n                124,\n                135,\n                136,\n                137,\n                139,\n                148,\n                151,\n                152,\n                154,\n                156,\n                157,\n                158,\n                159,\n                170,\n                171,\n                172,\n                175,\n                181,\n                207,\n                208,\n                212,\n                215,\n                223,\n                238,\n                240,\n                248,\n                250,\n                259,\n                260,\n                266,\n                284,\n                285,\n                291,\n                293,\n                294,\n                299,\n                314,\n                325,\n                329,\n                332,\n                343,\n                344,\n                346,\n                350,\n                377,\n                380,\n                384,\n                387,\n                389,\n                400,\n                407,\n                409,\n                411,\n                412,\n                419,\n                424,\n                445,\n                449,\n                450,\n                452,\n                461,\n                468,\n                485,\n                495,\n                508,\n                512,\n                514,\n                523,\n                524,\n                527,\n                531,\n                532,\n                548,\n                550,\n                556,\n                560,\n                561,\n                587,\n                588,\n                593,\n                595,\n                598,\n                606,\n                607,\n                625,\n                628,\n                629,\n                630,\n                631,\n                632,\n                641,\n                644,\n                667,\n                670,\n                671,\n                695,\n                696,\n                700,\n                701,\n                702,\n                703,\n                705,\n                718,\n                719,\n                723,\n                724,\n                726,\n                728,\n                733,\n                734,\n                735,\n                736,\n                743,\n                745,\n                746,\n                753,\n                755,\n                756,\n                771,\n                772,\n                773,\n                776,\n                780,\n                787,\n                793,\n                802,\n                813,\n                815,\n                816,\n                826,\n                831,\n                837,\n                843,\n                846,\n                849,\n                861,\n                869,\n                870,\n                873,\n                876\n            ],\n            \"human_impact_ids\": []\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fceea63-1ac1-4e23-86b0-5f4f6a0dbe36",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Biscayne Bay')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?name=Biscayne Bay",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "name",
									"value": "Biscayne Bay",
									"description": "Name of body of water (String)"
								}
							]
						},
						"description": "Returns the body of water with the given name"
					},
					"response": [
						{
							"name": "Get Body of Water by Name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?name=Biscayne Bay",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "name",
											"value": "Biscayne Bay",
											"description": "Name of body of water (String)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "4015"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:15:04 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 240,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Biscayne Bay\",\n            \"type\": \"Bay\",\n            \"latitude\": 26,\n            \"longitude\": -80,\n            \"min_latitude\": 25,\n            \"min_longitude\": -80,\n            \"max_latitude\": 26,\n            \"max_longitude\": -80,\n            \"water_temp\": null,\n            \"tide_height\": null,\n            \"size\": 2863,\n            \"fish\": [\n                1,\n                5,\n                8,\n                12,\n                13,\n                17,\n                20,\n                23,\n                26,\n                45,\n                51,\n                54,\n                57,\n                60,\n                61,\n                69,\n                72,\n                73,\n                78,\n                98,\n                99,\n                102,\n                113,\n                114,\n                115,\n                120,\n                124,\n                135,\n                136,\n                137,\n                139,\n                148,\n                151,\n                152,\n                154,\n                156,\n                157,\n                158,\n                159,\n                170,\n                171,\n                172,\n                175,\n                181,\n                207,\n                208,\n                212,\n                215,\n                223,\n                238,\n                240,\n                248,\n                250,\n                259,\n                260,\n                266,\n                284,\n                285,\n                291,\n                293,\n                294,\n                299,\n                314,\n                325,\n                329,\n                332,\n                343,\n                344,\n                346,\n                350,\n                377,\n                380,\n                384,\n                387,\n                389,\n                400,\n                407,\n                409,\n                411,\n                412,\n                419,\n                424,\n                445,\n                449,\n                450,\n                452,\n                461,\n                468,\n                485,\n                495,\n                508,\n                512,\n                514,\n                523,\n                524,\n                527,\n                531,\n                532,\n                548,\n                550,\n                556,\n                560,\n                561,\n                587,\n                588,\n                593,\n                595,\n                598,\n                606,\n                607,\n                625,\n                628,\n                629,\n                630,\n                631,\n                632,\n                641,\n                644,\n                667,\n                670,\n                671,\n                695,\n                696,\n                700,\n                701,\n                702,\n                703,\n                705,\n                718,\n                719,\n                723,\n                724,\n                726,\n                728,\n                733,\n                734,\n                735,\n                736,\n                743,\n                745,\n                746,\n                753,\n                755,\n                756,\n                771,\n                772,\n                773,\n                776,\n                780,\n                787,\n                793,\n                802,\n                813,\n                815,\n                816,\n                826,\n                831,\n                837,\n                843,\n                846,\n                849,\n                861,\n                869,\n                870,\n                873,\n                876\n            ],\n            \"human_impact_ids\": []\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Latitude and Longitude",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a56c61b-4d91-4301-a9f5-075ab68ec93b",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Biscayne Bay')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?latitude=26&longitude=-80&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "latitude",
									"value": "26",
									"description": "Latitude coordinate"
								},
								{
									"key": "longitude",
									"value": "-80",
									"description": "Longitude coordinate"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Total number of water entries to return"
								}
							]
						},
						"description": "Return the body of water by latitude and longitude"
					},
					"response": [
						{
							"name": "Get Body of Water by Latitude and Longitude",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?latitude=26&longitude=-80&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "latitude",
											"value": "26",
											"description": "Latitude coordinate"
										},
										{
											"key": "longitude",
											"value": "-80",
											"description": "Longitude coordinate"
										},
										{
											"key": "limit",
											"value": "1",
											"description": "Total number of water entries to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "4015"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:15:34 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 240,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Biscayne Bay\",\n            \"type\": \"Bay\",\n            \"latitude\": 26,\n            \"longitude\": -80,\n            \"min_latitude\": 25,\n            \"min_longitude\": -80,\n            \"max_latitude\": 26,\n            \"max_longitude\": -80,\n            \"water_temp\": null,\n            \"tide_height\": null,\n            \"size\": 2863,\n            \"fish\": [\n                1,\n                5,\n                8,\n                12,\n                13,\n                17,\n                20,\n                23,\n                26,\n                45,\n                51,\n                54,\n                57,\n                60,\n                61,\n                69,\n                72,\n                73,\n                78,\n                98,\n                99,\n                102,\n                113,\n                114,\n                115,\n                120,\n                124,\n                135,\n                136,\n                137,\n                139,\n                148,\n                151,\n                152,\n                154,\n                156,\n                157,\n                158,\n                159,\n                170,\n                171,\n                172,\n                175,\n                181,\n                207,\n                208,\n                212,\n                215,\n                223,\n                238,\n                240,\n                248,\n                250,\n                259,\n                260,\n                266,\n                284,\n                285,\n                291,\n                293,\n                294,\n                299,\n                314,\n                325,\n                329,\n                332,\n                343,\n                344,\n                346,\n                350,\n                377,\n                380,\n                384,\n                387,\n                389,\n                400,\n                407,\n                409,\n                411,\n                412,\n                419,\n                424,\n                445,\n                449,\n                450,\n                452,\n                461,\n                468,\n                485,\n                495,\n                508,\n                512,\n                514,\n                523,\n                524,\n                527,\n                531,\n                532,\n                548,\n                550,\n                556,\n                560,\n                561,\n                587,\n                588,\n                593,\n                595,\n                598,\n                606,\n                607,\n                625,\n                628,\n                629,\n                630,\n                631,\n                632,\n                641,\n                644,\n                667,\n                670,\n                671,\n                695,\n                696,\n                700,\n                701,\n                702,\n                703,\n                705,\n                718,\n                719,\n                723,\n                724,\n                726,\n                728,\n                733,\n                734,\n                735,\n                736,\n                743,\n                745,\n                746,\n                753,\n                755,\n                756,\n                771,\n                772,\n                773,\n                776,\n                780,\n                787,\n                793,\n                802,\n                813,\n                815,\n                816,\n                826,\n                831,\n                837,\n                843,\n                846,\n                849,\n                861,\n                869,\n                870,\n                873,\n                876\n            ],\n            \"human_impact_ids\": []\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Water related queries/request\r\n\r\n**Description of Return Types**\r\n\r\n\"total_water_count\" = Total number of bodies of water in the database\r\n\r\n\"total_water_returned\" = Total number of bodies of water returned in this query\r\n\r\n\"data\" = Block for the list of water entries\r\n\r\n\"id\" = Id entry in the database\r\n\r\n\"name\" = Name of the body of water\r\n\r\n\"type\" = Type of body of water returned\r\n\r\n\"latitude\" = Rough latitude value of the body of water\r\n\r\n\"longitude\" = Rough longitude value of the body of water\r\n\r\n\"min_latitude\" = Rough latitude value of the body of water, offset to -latitude\r\n\r\n\"min_longitude\" = Rough longitude value of the body of water, offset to -longitude\r\n\r\n\"max_latitude\" = Rough latitude value of the body of water, offset to +latitude\r\n\r\n\"max_longitude\" = Rough longitude value of the body of water, offset to +longitude\r\n\r\n\"water_temp\" = Water temperature of the body of water\r\n\r\n\"tide_height\" = Current tide height of the water, if applicable\r\n\r\n\"size\" = Surface area of the body of water, in mi^2\r\n\r\n\"fish\" = List of Id's of fish found in the body of water\r\n\r\n\"human_impact_ids\" = List of Id's of human impact that affects this body of water\r\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9ec57629-89dc-4095-a81a-b0d033a0fa27",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf08b18b-90ad-403a-9cfd-3596a53fbbe7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.any.keys('total_water_count', 'data');",
							"});",
							"pm.test(\"Check Data in Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'tide_height', 'size', 'fish', 'human_impact_ids')",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Human Impact",
			"item": [
				{
					"name": "Get all Human Impacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7830329f-f183-4687-a0ad-14014036f5b6",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish'];\r",
									"    pm.expect(data.name).to.eql('Odyssey')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?limit=2&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "Maximum number of human impacts to return"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Index to start querying at"
								}
							]
						},
						"description": "Returns all the human impact instances we have avaliable."
					},
					"response": [
						{
							"name": "Get all Human Impacts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?limit=2&offset=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Maximum number of human impacts to return"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Index to start querying at"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "19091"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:04:38 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 57,\n    \"total_impact_returned\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 43,\n            \"longitude\": -62,\n            \"date\": \"10/11/1998\",\n            \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n            \"name\": \"Odyssey\",\n            \"oil_amount\": 132000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"location\": [\n                {\n                    \"id\": 51,\n                    \"name\": \"Little Lurcher\"\n                },\n                {\n                    \"id\": 52,\n                    \"name\": \"Lurcher Shoal\"\n                },\n                {\n                    \"id\": 63,\n                    \"name\": \"McDormand Patch\"\n                },\n                {\n                    \"id\": 73,\n                    \"name\": \"Mitchell Bay\"\n                },\n                {\n                    \"id\": 74,\n                    \"name\": \"Little Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 75,\n                    \"name\": \"Lang Shoal\"\n                },\n                {\n                    \"id\": 76,\n                    \"name\": \"Hardwood Island Shoal\"\n                },\n                {\n                    \"id\": 77,\n                    \"name\": \"Mackerel Shoal\"\n                },\n                {\n                    \"id\": 78,\n                    \"name\": \"Middle Ground\"\n                },\n                {\n                    \"id\": 79,\n                    \"name\": \"Lumpfish Shoal\"\n                },\n                {\n                    \"id\": 80,\n                    \"name\": \"Middle Shoal\"\n                },\n                {\n                    \"id\": 81,\n                    \"name\": \"Kitts Reef\"\n                },\n                {\n                    \"id\": 82,\n                    \"name\": \"Turners Shoal\"\n                },\n                {\n                    \"id\": 83,\n                    \"name\": \"Pollock Shoal\"\n                },\n                {\n                    \"id\": 84,\n                    \"name\": \"Pan Shoal\"\n                },\n                {\n                    \"id\": 85,\n                    \"name\": \"The Frenchman\"\n                },\n                {\n                    \"id\": 86,\n                    \"name\": \"Sammys Shoal\"\n                },\n                {\n                    \"id\": 87,\n                    \"name\": \"Hatch Cove Shoal\"\n                },\n                {\n                    \"id\": 88,\n                    \"name\": \"Calf Island Shoal\"\n                },\n                {\n                    \"id\": 89,\n                    \"name\": \"Thrumcap Shoal\"\n                },\n                {\n                    \"id\": 90,\n                    \"name\": \"MacKinley Shoal\"\n                },\n                {\n                    \"id\": 91,\n                    \"name\": \"Sand Shoal\"\n                },\n                {\n                    \"id\": 92,\n                    \"name\": \"Liscomb Shoal\"\n                },\n                {\n                    \"id\": 93,\n                    \"name\": \"Georges Mark\"\n                },\n                {\n                    \"id\": 94,\n                    \"name\": \"Wedge Shoal\"\n                },\n                {\n                    \"id\": 95,\n                    \"name\": \"Fleck Shoal\"\n                },\n                {\n                    \"id\": 96,\n                    \"name\": \"Nixons Mate Shoal\"\n                },\n                {\n                    \"id\": 97,\n                    \"name\": \"The Reef\"\n                },\n                {\n                    \"id\": 98,\n                    \"name\": \"Pride Shoal\"\n                },\n                {\n                    \"id\": 99,\n                    \"name\": \"Lawsons Shoal\"\n                },\n                {\n                    \"id\": 100,\n                    \"name\": \"George Pyes Shoal\"\n                },\n                {\n                    \"id\": 101,\n                    \"name\": \"Big Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 102,\n                    \"name\": \"Peter Shoal\"\n                },\n                {\n                    \"id\": 103,\n                    \"name\": \"Flat Shoal\"\n                },\n                {\n                    \"id\": 104,\n                    \"name\": \"Lower Bay Shoal\"\n                },\n                {\n                    \"id\": 105,\n                    \"name\": \"Upper Bay Shoal\"\n                },\n                {\n                    \"id\": 106,\n                    \"name\": \"Stone Horse\"\n                },\n                {\n                    \"id\": 107,\n                    \"name\": \"Steves Shoal\"\n                },\n                {\n                    \"id\": 108,\n                    \"name\": \"White Knoll Ledge\"\n                },\n                {\n                    \"id\": 109,\n                    \"name\": \"Toots Shoal\"\n                },\n                {\n                    \"id\": 110,\n                    \"name\": \"The Hay Cock\"\n                },\n                {\n                    \"id\": 111,\n                    \"name\": \"East Bear Point Ledge\"\n                },\n                {\n                    \"id\": 112,\n                    \"name\": \"Houses Ground\"\n                },\n                {\n                    \"id\": 113,\n                    \"name\": \"Little Horse Race\"\n                },\n                {\n                    \"id\": 114,\n                    \"name\": \"Long Reef\"\n                },\n                {\n                    \"id\": 115,\n                    \"name\": \"Cross Ledge\"\n                },\n                {\n                    \"id\": 116,\n                    \"name\": \"Murray Shoal\"\n                },\n                {\n                    \"id\": 117,\n                    \"name\": \"Cunningham Reef\"\n                },\n                {\n                    \"id\": 118,\n                    \"name\": \"Huskins Reef\"\n                },\n                {\n                    \"id\": 119,\n                    \"name\": \"Liverpool Ledge\"\n                },\n                {\n                    \"id\": 120,\n                    \"name\": \"South Angle Ledge\"\n                },\n                {\n                    \"id\": 121,\n                    \"name\": \"Southwest Ledge\"\n                },\n                {\n                    \"id\": 122,\n                    \"name\": \"Horse Race\"\n                },\n                {\n                    \"id\": 123,\n                    \"name\": \"Cape Ledge\"\n                },\n                {\n                    \"id\": 124,\n                    \"name\": \"Inner Shoal\"\n                },\n                {\n                    \"id\": 125,\n                    \"name\": \"Hero Shoal\"\n                },\n                {\n                    \"id\": 126,\n                    \"name\": \"Congress Shoal\"\n                },\n                {\n                    \"id\": 127,\n                    \"name\": \"Mid Ledge\"\n                },\n                {\n                    \"id\": 128,\n                    \"name\": \"Doddys Shoal\"\n                },\n                {\n                    \"id\": 129,\n                    \"name\": \"Cooks Ledge\"\n                },\n                {\n                    \"id\": 130,\n                    \"name\": \"Daniel Shoal\"\n                },\n                {\n                    \"id\": 131,\n                    \"name\": \"Stoney Island Shoal\"\n                },\n                {\n                    \"id\": 132,\n                    \"name\": \"Lovetts Shoal\"\n                },\n                {\n                    \"id\": 133,\n                    \"name\": \"Newellton Reef\"\n                },\n                {\n                    \"id\": 134,\n                    \"name\": \"Soldiers Ledge\"\n                },\n                {\n                    \"id\": 135,\n                    \"name\": \"Adamant Shoal\"\n                },\n                {\n                    \"id\": 137,\n                    \"name\": \"St. Margarets Bay\"\n                },\n                {\n                    \"id\": 138,\n                    \"name\": \"Big Fish Shoal\"\n                },\n                {\n                    \"id\": 139,\n                    \"name\": \"Middle Patch\"\n                },\n                {\n                    \"id\": 140,\n                    \"name\": \"Backmans Shoal\"\n                },\n                {\n                    \"id\": 141,\n                    \"name\": \"Sand Cove Head Shoal\"\n                },\n                {\n                    \"id\": 142,\n                    \"name\": \"Spectacle Shoal\"\n                },\n                {\n                    \"id\": 143,\n                    \"name\": \"Northeast Coachman\"\n                },\n                {\n                    \"id\": 144,\n                    \"name\": \"Sand Cove Shoal\"\n                },\n                {\n                    \"id\": 145,\n                    \"name\": \"Northeast Shoal\"\n                },\n                {\n                    \"id\": 146,\n                    \"name\": \"Nose Shoal\"\n                },\n                {\n                    \"id\": 147,\n                    \"name\": \"Dogfish Ground\"\n                },\n                {\n                    \"id\": 148,\n                    \"name\": \"Gull Shoal\"\n                },\n                {\n                    \"id\": 149,\n                    \"name\": \"Southeast Shoal\"\n                },\n                {\n                    \"id\": 150,\n                    \"name\": \"Spectacle Shoals\"\n                },\n                {\n                    \"id\": 151,\n                    \"name\": \"Jack Langilles Shoal\"\n                },\n                {\n                    \"id\": 152,\n                    \"name\": \"Bella Shoal\"\n                },\n                {\n                    \"id\": 153,\n                    \"name\": \"Young Ledge\"\n                },\n                {\n                    \"id\": 154,\n                    \"name\": \"Graves Shoal\"\n                },\n                {\n                    \"id\": 155,\n                    \"name\": \"Frog Island Shoal\"\n                },\n                {\n                    \"id\": 156,\n                    \"name\": \"Middle Shoals\"\n                },\n                {\n                    \"id\": 157,\n                    \"name\": \"Sculpin Shoal\"\n                },\n                {\n                    \"id\": 158,\n                    \"name\": \"Lynch Shoal\"\n                },\n                {\n                    \"id\": 159,\n                    \"name\": \"Western Lobster Claw\"\n                },\n                {\n                    \"id\": 160,\n                    \"name\": \"Southeast Shoals\"\n                },\n                {\n                    \"id\": 161,\n                    \"name\": \"Haddock Shoal\"\n                },\n                {\n                    \"id\": 162,\n                    \"name\": \"South Shoal\"\n                },\n                {\n                    \"id\": 163,\n                    \"name\": \"Hutt Shoal\"\n                },\n                {\n                    \"id\": 164,\n                    \"name\": \"West Shoals\"\n                },\n                {\n                    \"id\": 165,\n                    \"name\": \"Blandford Shoal\"\n                },\n                {\n                    \"id\": 166,\n                    \"name\": \"Five Finger Shoal\"\n                },\n                {\n                    \"id\": 167,\n                    \"name\": \"The Grampus\"\n                },\n                {\n                    \"id\": 168,\n                    \"name\": \"Meisners Shoal\"\n                },\n                {\n                    \"id\": 169,\n                    \"name\": \"Shad Bay Breakers\"\n                },\n                {\n                    \"id\": 170,\n                    \"name\": \"Kitiwiti Shoal\"\n                },\n                {\n                    \"id\": 171,\n                    \"name\": \"Birch Shoal\"\n                },\n                {\n                    \"id\": 172,\n                    \"name\": \"Round Shoal\"\n                },\n                {\n                    \"id\": 173,\n                    \"name\": \"Slaunwhites Shoal\"\n                },\n                {\n                    \"id\": 174,\n                    \"name\": \"Quaker Shoal\"\n                },\n                {\n                    \"id\": 175,\n                    \"name\": \"Green Shoal\"\n                },\n                {\n                    \"id\": 176,\n                    \"name\": \"Bedford Basin\"\n                },\n                {\n                    \"id\": 177,\n                    \"name\": \"Bigfish Shoal\"\n                },\n                {\n                    \"id\": 178,\n                    \"name\": \"Colt Shoal\"\n                },\n                {\n                    \"id\": 179,\n                    \"name\": \"Pleasant Shoal\"\n                },\n                {\n                    \"id\": 180,\n                    \"name\": \"Duncan Reef\"\n                },\n                {\n                    \"id\": 181,\n                    \"name\": \"Cronie Reef\"\n                },\n                {\n                    \"id\": 182,\n                    \"name\": \"Connor Reef\"\n                },\n                {\n                    \"id\": 183,\n                    \"name\": \"Portuguese Shoal\"\n                },\n                {\n                    \"id\": 184,\n                    \"name\": \"Head Rock Shoal\"\n                },\n                {\n                    \"id\": 185,\n                    \"name\": \"Neverfail Shoal\"\n                },\n                {\n                    \"id\": 186,\n                    \"name\": \"East Shoal\"\n                },\n                {\n                    \"id\": 187,\n                    \"name\": \"Nick Shoal\"\n                },\n                {\n                    \"id\": 188,\n                    \"name\": \"Little Pollock\"\n                },\n                {\n                    \"id\": 189,\n                    \"name\": \"Tribune Shoal\"\n                },\n                {\n                    \"id\": 190,\n                    \"name\": \"Shoal Ground\"\n                },\n                {\n                    \"id\": 191,\n                    \"name\": \"Horse Shoal\"\n                },\n                {\n                    \"id\": 192,\n                    \"name\": \"Mare Shoal\"\n                },\n                {\n                    \"id\": 193,\n                    \"name\": \"Warrens Shoal\"\n                },\n                {\n                    \"id\": 194,\n                    \"name\": \"Hume Shoal\"\n                },\n                {\n                    \"id\": 195,\n                    \"name\": \"Rous Shoal\"\n                },\n                {\n                    \"id\": 201,\n                    \"name\": \"Moores Ledge\"\n                },\n                {\n                    \"id\": 214,\n                    \"name\": \"Gordon Ground\"\n                },\n                {\n                    \"id\": 215,\n                    \"name\": \"Blow Breaker\"\n                },\n                {\n                    \"id\": 216,\n                    \"name\": \"Southeast Reef\"\n                },\n                {\n                    \"id\": 217,\n                    \"name\": \"South Ledge\"\n                },\n                {\n                    \"id\": 218,\n                    \"name\": \"Tickeys Shoal\"\n                },\n                {\n                    \"id\": 219,\n                    \"name\": \"Farm Ledge\"\n                }\n            ],\n            \"fish\": [\n                {\n                    \"id\": 92,\n                    \"scientific_name\": \"Amblyraja radiata\"\n                },\n                {\n                    \"id\": 600,\n                    \"scientific_name\": \"Clupea harengus\"\n                },\n                {\n                    \"id\": 804,\n                    \"scientific_name\": \"Enchelyopus cimbrius\"\n                },\n                {\n                    \"id\": 174,\n                    \"scientific_name\": \"Arctozenus risso\"\n                },\n                {\n                    \"id\": 332,\n                    \"scientific_name\": \"Callionymus bairdi\"\n                },\n                {\n                    \"id\": 408,\n                    \"scientific_name\": \"Centrolophus niger\"\n                },\n                {\n                    \"id\": 456,\n                    \"scientific_name\": \"Cetorhinus maximus\"\n                },\n                {\n                    \"id\": 364,\n                    \"scientific_name\": \"Capros aper\"\n                }\n            ]\n        },\n        {\n            \"id\": 2,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 20,\n            \"longitude\": -163,\n            \"date\": \"23/02/1977\",\n            \"description\": \"On 23th February 1977, HAWAIIAN PATRIOT fully loaded with 99,000 tonnes of  light Indonesian crude oil, en route from Indonesia to Honolulu, reported a crack in her hull plating during a storm which resulted in a leak of oil from the cargo holds approximately 300 miles west of Hawaii. Approximately 18,000 tonnes of oil had leaked into the sea and on the following day the tanker caught fire and exploded. It burnt fiercely for several hours and sank with the remaining cargo on board. One crew member died as a result. The resultant oil slick, which was estimated to contain about 50,000 tonnes of oil was carried westward away from Hawaii by ocean currents and did not result in pollution problems on land. The slick was kept under surveillance.  No response to the oil spill took place as the oil dissipated naturally.\",\n            \"name\": \"Hawaiian Patriot\",\n            \"oil_amount\": 95000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"location\": [\n                {\n                    \"id\": 55,\n                    \"name\": \"Insular Pacific-Hawaiian\"\n                }\n            ],\n            \"fish\": [\n                {\n                    \"id\": 105,\n                    \"scientific_name\": \"Anampses chrysocephalus\"\n                },\n                {\n                    \"id\": 407,\n                    \"scientific_name\": \"Centrobranchus nigroocellatus\"\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3d60fe8-dc9a-4cad-86b6-086fddc8d703",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data;\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish'];\r",
									"    pm.expect(data[0].name).to.eql('Odyssey')\r",
									"    pm.expect(data[0].subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"type": "string",
									"description": "id of human impact to return"
								}
							]
						},
						"description": "Return the human impact specified by the id path parameter."
					},
					"response": [
						{
							"name": "Get Human Impact By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string",
											"description": "id of human impact to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "17184"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:03:49 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 43,\n            \"longitude\": -62,\n            \"date\": \"10/11/1998\",\n            \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n            \"name\": \"Odyssey\",\n            \"oil_amount\": 132000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"location\": [\n                {\n                    \"id\": 51,\n                    \"name\": \"Little Lurcher\"\n                },\n                {\n                    \"id\": 52,\n                    \"name\": \"Lurcher Shoal\"\n                },\n                {\n                    \"id\": 63,\n                    \"name\": \"McDormand Patch\"\n                },\n                {\n                    \"id\": 73,\n                    \"name\": \"Mitchell Bay\"\n                },\n                {\n                    \"id\": 74,\n                    \"name\": \"Little Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 75,\n                    \"name\": \"Lang Shoal\"\n                },\n                {\n                    \"id\": 76,\n                    \"name\": \"Hardwood Island Shoal\"\n                },\n                {\n                    \"id\": 77,\n                    \"name\": \"Mackerel Shoal\"\n                },\n                {\n                    \"id\": 78,\n                    \"name\": \"Middle Ground\"\n                },\n                {\n                    \"id\": 79,\n                    \"name\": \"Lumpfish Shoal\"\n                },\n                {\n                    \"id\": 80,\n                    \"name\": \"Middle Shoal\"\n                },\n                {\n                    \"id\": 81,\n                    \"name\": \"Kitts Reef\"\n                },\n                {\n                    \"id\": 82,\n                    \"name\": \"Turners Shoal\"\n                },\n                {\n                    \"id\": 83,\n                    \"name\": \"Pollock Shoal\"\n                },\n                {\n                    \"id\": 84,\n                    \"name\": \"Pan Shoal\"\n                },\n                {\n                    \"id\": 85,\n                    \"name\": \"The Frenchman\"\n                },\n                {\n                    \"id\": 86,\n                    \"name\": \"Sammys Shoal\"\n                },\n                {\n                    \"id\": 87,\n                    \"name\": \"Hatch Cove Shoal\"\n                },\n                {\n                    \"id\": 88,\n                    \"name\": \"Calf Island Shoal\"\n                },\n                {\n                    \"id\": 89,\n                    \"name\": \"Thrumcap Shoal\"\n                },\n                {\n                    \"id\": 90,\n                    \"name\": \"MacKinley Shoal\"\n                },\n                {\n                    \"id\": 91,\n                    \"name\": \"Sand Shoal\"\n                },\n                {\n                    \"id\": 92,\n                    \"name\": \"Liscomb Shoal\"\n                },\n                {\n                    \"id\": 93,\n                    \"name\": \"Georges Mark\"\n                },\n                {\n                    \"id\": 94,\n                    \"name\": \"Wedge Shoal\"\n                },\n                {\n                    \"id\": 95,\n                    \"name\": \"Fleck Shoal\"\n                },\n                {\n                    \"id\": 96,\n                    \"name\": \"Nixons Mate Shoal\"\n                },\n                {\n                    \"id\": 97,\n                    \"name\": \"The Reef\"\n                },\n                {\n                    \"id\": 98,\n                    \"name\": \"Pride Shoal\"\n                },\n                {\n                    \"id\": 99,\n                    \"name\": \"Lawsons Shoal\"\n                },\n                {\n                    \"id\": 100,\n                    \"name\": \"George Pyes Shoal\"\n                },\n                {\n                    \"id\": 101,\n                    \"name\": \"Big Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 102,\n                    \"name\": \"Peter Shoal\"\n                },\n                {\n                    \"id\": 103,\n                    \"name\": \"Flat Shoal\"\n                },\n                {\n                    \"id\": 104,\n                    \"name\": \"Lower Bay Shoal\"\n                },\n                {\n                    \"id\": 105,\n                    \"name\": \"Upper Bay Shoal\"\n                },\n                {\n                    \"id\": 106,\n                    \"name\": \"Stone Horse\"\n                },\n                {\n                    \"id\": 107,\n                    \"name\": \"Steves Shoal\"\n                },\n                {\n                    \"id\": 108,\n                    \"name\": \"White Knoll Ledge\"\n                },\n                {\n                    \"id\": 109,\n                    \"name\": \"Toots Shoal\"\n                },\n                {\n                    \"id\": 110,\n                    \"name\": \"The Hay Cock\"\n                },\n                {\n                    \"id\": 111,\n                    \"name\": \"East Bear Point Ledge\"\n                },\n                {\n                    \"id\": 112,\n                    \"name\": \"Houses Ground\"\n                },\n                {\n                    \"id\": 113,\n                    \"name\": \"Little Horse Race\"\n                },\n                {\n                    \"id\": 114,\n                    \"name\": \"Long Reef\"\n                },\n                {\n                    \"id\": 115,\n                    \"name\": \"Cross Ledge\"\n                },\n                {\n                    \"id\": 116,\n                    \"name\": \"Murray Shoal\"\n                },\n                {\n                    \"id\": 117,\n                    \"name\": \"Cunningham Reef\"\n                },\n                {\n                    \"id\": 118,\n                    \"name\": \"Huskins Reef\"\n                },\n                {\n                    \"id\": 119,\n                    \"name\": \"Liverpool Ledge\"\n                },\n                {\n                    \"id\": 120,\n                    \"name\": \"South Angle Ledge\"\n                },\n                {\n                    \"id\": 121,\n                    \"name\": \"Southwest Ledge\"\n                },\n                {\n                    \"id\": 122,\n                    \"name\": \"Horse Race\"\n                },\n                {\n                    \"id\": 123,\n                    \"name\": \"Cape Ledge\"\n                },\n                {\n                    \"id\": 124,\n                    \"name\": \"Inner Shoal\"\n                },\n                {\n                    \"id\": 125,\n                    \"name\": \"Hero Shoal\"\n                },\n                {\n                    \"id\": 126,\n                    \"name\": \"Congress Shoal\"\n                },\n                {\n                    \"id\": 127,\n                    \"name\": \"Mid Ledge\"\n                },\n                {\n                    \"id\": 128,\n                    \"name\": \"Doddys Shoal\"\n                },\n                {\n                    \"id\": 129,\n                    \"name\": \"Cooks Ledge\"\n                },\n                {\n                    \"id\": 130,\n                    \"name\": \"Daniel Shoal\"\n                },\n                {\n                    \"id\": 131,\n                    \"name\": \"Stoney Island Shoal\"\n                },\n                {\n                    \"id\": 132,\n                    \"name\": \"Lovetts Shoal\"\n                },\n                {\n                    \"id\": 133,\n                    \"name\": \"Newellton Reef\"\n                },\n                {\n                    \"id\": 134,\n                    \"name\": \"Soldiers Ledge\"\n                },\n                {\n                    \"id\": 135,\n                    \"name\": \"Adamant Shoal\"\n                },\n                {\n                    \"id\": 137,\n                    \"name\": \"St. Margarets Bay\"\n                },\n                {\n                    \"id\": 138,\n                    \"name\": \"Big Fish Shoal\"\n                },\n                {\n                    \"id\": 139,\n                    \"name\": \"Middle Patch\"\n                },\n                {\n                    \"id\": 140,\n                    \"name\": \"Backmans Shoal\"\n                },\n                {\n                    \"id\": 141,\n                    \"name\": \"Sand Cove Head Shoal\"\n                },\n                {\n                    \"id\": 142,\n                    \"name\": \"Spectacle Shoal\"\n                },\n                {\n                    \"id\": 143,\n                    \"name\": \"Northeast Coachman\"\n                },\n                {\n                    \"id\": 144,\n                    \"name\": \"Sand Cove Shoal\"\n                },\n                {\n                    \"id\": 145,\n                    \"name\": \"Northeast Shoal\"\n                },\n                {\n                    \"id\": 146,\n                    \"name\": \"Nose Shoal\"\n                },\n                {\n                    \"id\": 147,\n                    \"name\": \"Dogfish Ground\"\n                },\n                {\n                    \"id\": 148,\n                    \"name\": \"Gull Shoal\"\n                },\n                {\n                    \"id\": 149,\n                    \"name\": \"Southeast Shoal\"\n                },\n                {\n                    \"id\": 150,\n                    \"name\": \"Spectacle Shoals\"\n                },\n                {\n                    \"id\": 151,\n                    \"name\": \"Jack Langilles Shoal\"\n                },\n                {\n                    \"id\": 152,\n                    \"name\": \"Bella Shoal\"\n                },\n                {\n                    \"id\": 153,\n                    \"name\": \"Young Ledge\"\n                },\n                {\n                    \"id\": 154,\n                    \"name\": \"Graves Shoal\"\n                },\n                {\n                    \"id\": 155,\n                    \"name\": \"Frog Island Shoal\"\n                },\n                {\n                    \"id\": 156,\n                    \"name\": \"Middle Shoals\"\n                },\n                {\n                    \"id\": 157,\n                    \"name\": \"Sculpin Shoal\"\n                },\n                {\n                    \"id\": 158,\n                    \"name\": \"Lynch Shoal\"\n                },\n                {\n                    \"id\": 159,\n                    \"name\": \"Western Lobster Claw\"\n                },\n                {\n                    \"id\": 160,\n                    \"name\": \"Southeast Shoals\"\n                },\n                {\n                    \"id\": 161,\n                    \"name\": \"Haddock Shoal\"\n                },\n                {\n                    \"id\": 162,\n                    \"name\": \"South Shoal\"\n                },\n                {\n                    \"id\": 163,\n                    \"name\": \"Hutt Shoal\"\n                },\n                {\n                    \"id\": 164,\n                    \"name\": \"West Shoals\"\n                },\n                {\n                    \"id\": 165,\n                    \"name\": \"Blandford Shoal\"\n                },\n                {\n                    \"id\": 166,\n                    \"name\": \"Five Finger Shoal\"\n                },\n                {\n                    \"id\": 167,\n                    \"name\": \"The Grampus\"\n                },\n                {\n                    \"id\": 168,\n                    \"name\": \"Meisners Shoal\"\n                },\n                {\n                    \"id\": 169,\n                    \"name\": \"Shad Bay Breakers\"\n                },\n                {\n                    \"id\": 170,\n                    \"name\": \"Kitiwiti Shoal\"\n                },\n                {\n                    \"id\": 171,\n                    \"name\": \"Birch Shoal\"\n                },\n                {\n                    \"id\": 172,\n                    \"name\": \"Round Shoal\"\n                },\n                {\n                    \"id\": 173,\n                    \"name\": \"Slaunwhites Shoal\"\n                },\n                {\n                    \"id\": 174,\n                    \"name\": \"Quaker Shoal\"\n                },\n                {\n                    \"id\": 175,\n                    \"name\": \"Green Shoal\"\n                },\n                {\n                    \"id\": 176,\n                    \"name\": \"Bedford Basin\"\n                },\n                {\n                    \"id\": 177,\n                    \"name\": \"Bigfish Shoal\"\n                },\n                {\n                    \"id\": 178,\n                    \"name\": \"Colt Shoal\"\n                },\n                {\n                    \"id\": 179,\n                    \"name\": \"Pleasant Shoal\"\n                },\n                {\n                    \"id\": 180,\n                    \"name\": \"Duncan Reef\"\n                },\n                {\n                    \"id\": 181,\n                    \"name\": \"Cronie Reef\"\n                },\n                {\n                    \"id\": 182,\n                    \"name\": \"Connor Reef\"\n                },\n                {\n                    \"id\": 183,\n                    \"name\": \"Portuguese Shoal\"\n                },\n                {\n                    \"id\": 184,\n                    \"name\": \"Head Rock Shoal\"\n                },\n                {\n                    \"id\": 185,\n                    \"name\": \"Neverfail Shoal\"\n                },\n                {\n                    \"id\": 186,\n                    \"name\": \"East Shoal\"\n                },\n                {\n                    \"id\": 187,\n                    \"name\": \"Nick Shoal\"\n                },\n                {\n                    \"id\": 188,\n                    \"name\": \"Little Pollock\"\n                },\n                {\n                    \"id\": 189,\n                    \"name\": \"Tribune Shoal\"\n                },\n                {\n                    \"id\": 190,\n                    \"name\": \"Shoal Ground\"\n                },\n                {\n                    \"id\": 191,\n                    \"name\": \"Horse Shoal\"\n                },\n                {\n                    \"id\": 192,\n                    \"name\": \"Mare Shoal\"\n                },\n                {\n                    \"id\": 193,\n                    \"name\": \"Warrens Shoal\"\n                },\n                {\n                    \"id\": 194,\n                    \"name\": \"Hume Shoal\"\n                },\n                {\n                    \"id\": 195,\n                    \"name\": \"Rous Shoal\"\n                },\n                {\n                    \"id\": 201,\n                    \"name\": \"Moores Ledge\"\n                },\n                {\n                    \"id\": 214,\n                    \"name\": \"Gordon Ground\"\n                },\n                {\n                    \"id\": 215,\n                    \"name\": \"Blow Breaker\"\n                },\n                {\n                    \"id\": 216,\n                    \"name\": \"Southeast Reef\"\n                },\n                {\n                    \"id\": 217,\n                    \"name\": \"South Ledge\"\n                },\n                {\n                    \"id\": 218,\n                    \"name\": \"Tickeys Shoal\"\n                },\n                {\n                    \"id\": 219,\n                    \"name\": \"Farm Ledge\"\n                }\n            ],\n            \"fish\": [\n                {\n                    \"id\": 92,\n                    \"scientific_name\": \"Amblyraja radiata\"\n                },\n                {\n                    \"id\": 600,\n                    \"scientific_name\": \"Clupea harengus\"\n                },\n                {\n                    \"id\": 804,\n                    \"scientific_name\": \"Enchelyopus cimbrius\"\n                },\n                {\n                    \"id\": 174,\n                    \"scientific_name\": \"Arctozenus risso\"\n                },\n                {\n                    \"id\": 332,\n                    \"scientific_name\": \"Callionymus bairdi\"\n                },\n                {\n                    \"id\": 408,\n                    \"scientific_name\": \"Centrolophus niger\"\n                },\n                {\n                    \"id\": 456,\n                    \"scientific_name\": \"Cetorhinus maximus\"\n                },\n                {\n                    \"id\": 364,\n                    \"scientific_name\": \"Capros aper\"\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact By Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "774899d5-f0a2-460b-add0-90da19d0afe1",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish'];\r",
									"    pm.expect(data.name).to.eql('Odyssey')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?category=pollution&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "category",
									"value": "pollution",
									"description": "The category of human impact to return"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Retrieve all the instances that are associated with the type specified with the type path parameter. (Types include: pollution, powerplants, overfishing, ect...)"
					},
					"response": [
						{
							"name": "Get Human Impact By Category",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?category=pollution&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "category",
											"value": "pollution",
											"description": "The category of human impact to return"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "17214"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:06:10 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 57,\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 43,\n            \"longitude\": -62,\n            \"date\": \"10/11/1998\",\n            \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n            \"name\": \"Odyssey\",\n            \"oil_amount\": 132000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"location\": [\n                {\n                    \"id\": 51,\n                    \"name\": \"Little Lurcher\"\n                },\n                {\n                    \"id\": 52,\n                    \"name\": \"Lurcher Shoal\"\n                },\n                {\n                    \"id\": 63,\n                    \"name\": \"McDormand Patch\"\n                },\n                {\n                    \"id\": 73,\n                    \"name\": \"Mitchell Bay\"\n                },\n                {\n                    \"id\": 74,\n                    \"name\": \"Little Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 75,\n                    \"name\": \"Lang Shoal\"\n                },\n                {\n                    \"id\": 76,\n                    \"name\": \"Hardwood Island Shoal\"\n                },\n                {\n                    \"id\": 77,\n                    \"name\": \"Mackerel Shoal\"\n                },\n                {\n                    \"id\": 78,\n                    \"name\": \"Middle Ground\"\n                },\n                {\n                    \"id\": 79,\n                    \"name\": \"Lumpfish Shoal\"\n                },\n                {\n                    \"id\": 80,\n                    \"name\": \"Middle Shoal\"\n                },\n                {\n                    \"id\": 81,\n                    \"name\": \"Kitts Reef\"\n                },\n                {\n                    \"id\": 82,\n                    \"name\": \"Turners Shoal\"\n                },\n                {\n                    \"id\": 83,\n                    \"name\": \"Pollock Shoal\"\n                },\n                {\n                    \"id\": 84,\n                    \"name\": \"Pan Shoal\"\n                },\n                {\n                    \"id\": 85,\n                    \"name\": \"The Frenchman\"\n                },\n                {\n                    \"id\": 86,\n                    \"name\": \"Sammys Shoal\"\n                },\n                {\n                    \"id\": 87,\n                    \"name\": \"Hatch Cove Shoal\"\n                },\n                {\n                    \"id\": 88,\n                    \"name\": \"Calf Island Shoal\"\n                },\n                {\n                    \"id\": 89,\n                    \"name\": \"Thrumcap Shoal\"\n                },\n                {\n                    \"id\": 90,\n                    \"name\": \"MacKinley Shoal\"\n                },\n                {\n                    \"id\": 91,\n                    \"name\": \"Sand Shoal\"\n                },\n                {\n                    \"id\": 92,\n                    \"name\": \"Liscomb Shoal\"\n                },\n                {\n                    \"id\": 93,\n                    \"name\": \"Georges Mark\"\n                },\n                {\n                    \"id\": 94,\n                    \"name\": \"Wedge Shoal\"\n                },\n                {\n                    \"id\": 95,\n                    \"name\": \"Fleck Shoal\"\n                },\n                {\n                    \"id\": 96,\n                    \"name\": \"Nixons Mate Shoal\"\n                },\n                {\n                    \"id\": 97,\n                    \"name\": \"The Reef\"\n                },\n                {\n                    \"id\": 98,\n                    \"name\": \"Pride Shoal\"\n                },\n                {\n                    \"id\": 99,\n                    \"name\": \"Lawsons Shoal\"\n                },\n                {\n                    \"id\": 100,\n                    \"name\": \"George Pyes Shoal\"\n                },\n                {\n                    \"id\": 101,\n                    \"name\": \"Big Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 102,\n                    \"name\": \"Peter Shoal\"\n                },\n                {\n                    \"id\": 103,\n                    \"name\": \"Flat Shoal\"\n                },\n                {\n                    \"id\": 104,\n                    \"name\": \"Lower Bay Shoal\"\n                },\n                {\n                    \"id\": 105,\n                    \"name\": \"Upper Bay Shoal\"\n                },\n                {\n                    \"id\": 106,\n                    \"name\": \"Stone Horse\"\n                },\n                {\n                    \"id\": 107,\n                    \"name\": \"Steves Shoal\"\n                },\n                {\n                    \"id\": 108,\n                    \"name\": \"White Knoll Ledge\"\n                },\n                {\n                    \"id\": 109,\n                    \"name\": \"Toots Shoal\"\n                },\n                {\n                    \"id\": 110,\n                    \"name\": \"The Hay Cock\"\n                },\n                {\n                    \"id\": 111,\n                    \"name\": \"East Bear Point Ledge\"\n                },\n                {\n                    \"id\": 112,\n                    \"name\": \"Houses Ground\"\n                },\n                {\n                    \"id\": 113,\n                    \"name\": \"Little Horse Race\"\n                },\n                {\n                    \"id\": 114,\n                    \"name\": \"Long Reef\"\n                },\n                {\n                    \"id\": 115,\n                    \"name\": \"Cross Ledge\"\n                },\n                {\n                    \"id\": 116,\n                    \"name\": \"Murray Shoal\"\n                },\n                {\n                    \"id\": 117,\n                    \"name\": \"Cunningham Reef\"\n                },\n                {\n                    \"id\": 118,\n                    \"name\": \"Huskins Reef\"\n                },\n                {\n                    \"id\": 119,\n                    \"name\": \"Liverpool Ledge\"\n                },\n                {\n                    \"id\": 120,\n                    \"name\": \"South Angle Ledge\"\n                },\n                {\n                    \"id\": 121,\n                    \"name\": \"Southwest Ledge\"\n                },\n                {\n                    \"id\": 122,\n                    \"name\": \"Horse Race\"\n                },\n                {\n                    \"id\": 123,\n                    \"name\": \"Cape Ledge\"\n                },\n                {\n                    \"id\": 124,\n                    \"name\": \"Inner Shoal\"\n                },\n                {\n                    \"id\": 125,\n                    \"name\": \"Hero Shoal\"\n                },\n                {\n                    \"id\": 126,\n                    \"name\": \"Congress Shoal\"\n                },\n                {\n                    \"id\": 127,\n                    \"name\": \"Mid Ledge\"\n                },\n                {\n                    \"id\": 128,\n                    \"name\": \"Doddys Shoal\"\n                },\n                {\n                    \"id\": 129,\n                    \"name\": \"Cooks Ledge\"\n                },\n                {\n                    \"id\": 130,\n                    \"name\": \"Daniel Shoal\"\n                },\n                {\n                    \"id\": 131,\n                    \"name\": \"Stoney Island Shoal\"\n                },\n                {\n                    \"id\": 132,\n                    \"name\": \"Lovetts Shoal\"\n                },\n                {\n                    \"id\": 133,\n                    \"name\": \"Newellton Reef\"\n                },\n                {\n                    \"id\": 134,\n                    \"name\": \"Soldiers Ledge\"\n                },\n                {\n                    \"id\": 135,\n                    \"name\": \"Adamant Shoal\"\n                },\n                {\n                    \"id\": 137,\n                    \"name\": \"St. Margarets Bay\"\n                },\n                {\n                    \"id\": 138,\n                    \"name\": \"Big Fish Shoal\"\n                },\n                {\n                    \"id\": 139,\n                    \"name\": \"Middle Patch\"\n                },\n                {\n                    \"id\": 140,\n                    \"name\": \"Backmans Shoal\"\n                },\n                {\n                    \"id\": 141,\n                    \"name\": \"Sand Cove Head Shoal\"\n                },\n                {\n                    \"id\": 142,\n                    \"name\": \"Spectacle Shoal\"\n                },\n                {\n                    \"id\": 143,\n                    \"name\": \"Northeast Coachman\"\n                },\n                {\n                    \"id\": 144,\n                    \"name\": \"Sand Cove Shoal\"\n                },\n                {\n                    \"id\": 145,\n                    \"name\": \"Northeast Shoal\"\n                },\n                {\n                    \"id\": 146,\n                    \"name\": \"Nose Shoal\"\n                },\n                {\n                    \"id\": 147,\n                    \"name\": \"Dogfish Ground\"\n                },\n                {\n                    \"id\": 148,\n                    \"name\": \"Gull Shoal\"\n                },\n                {\n                    \"id\": 149,\n                    \"name\": \"Southeast Shoal\"\n                },\n                {\n                    \"id\": 150,\n                    \"name\": \"Spectacle Shoals\"\n                },\n                {\n                    \"id\": 151,\n                    \"name\": \"Jack Langilles Shoal\"\n                },\n                {\n                    \"id\": 152,\n                    \"name\": \"Bella Shoal\"\n                },\n                {\n                    \"id\": 153,\n                    \"name\": \"Young Ledge\"\n                },\n                {\n                    \"id\": 154,\n                    \"name\": \"Graves Shoal\"\n                },\n                {\n                    \"id\": 155,\n                    \"name\": \"Frog Island Shoal\"\n                },\n                {\n                    \"id\": 156,\n                    \"name\": \"Middle Shoals\"\n                },\n                {\n                    \"id\": 157,\n                    \"name\": \"Sculpin Shoal\"\n                },\n                {\n                    \"id\": 158,\n                    \"name\": \"Lynch Shoal\"\n                },\n                {\n                    \"id\": 159,\n                    \"name\": \"Western Lobster Claw\"\n                },\n                {\n                    \"id\": 160,\n                    \"name\": \"Southeast Shoals\"\n                },\n                {\n                    \"id\": 161,\n                    \"name\": \"Haddock Shoal\"\n                },\n                {\n                    \"id\": 162,\n                    \"name\": \"South Shoal\"\n                },\n                {\n                    \"id\": 163,\n                    \"name\": \"Hutt Shoal\"\n                },\n                {\n                    \"id\": 164,\n                    \"name\": \"West Shoals\"\n                },\n                {\n                    \"id\": 165,\n                    \"name\": \"Blandford Shoal\"\n                },\n                {\n                    \"id\": 166,\n                    \"name\": \"Five Finger Shoal\"\n                },\n                {\n                    \"id\": 167,\n                    \"name\": \"The Grampus\"\n                },\n                {\n                    \"id\": 168,\n                    \"name\": \"Meisners Shoal\"\n                },\n                {\n                    \"id\": 169,\n                    \"name\": \"Shad Bay Breakers\"\n                },\n                {\n                    \"id\": 170,\n                    \"name\": \"Kitiwiti Shoal\"\n                },\n                {\n                    \"id\": 171,\n                    \"name\": \"Birch Shoal\"\n                },\n                {\n                    \"id\": 172,\n                    \"name\": \"Round Shoal\"\n                },\n                {\n                    \"id\": 173,\n                    \"name\": \"Slaunwhites Shoal\"\n                },\n                {\n                    \"id\": 174,\n                    \"name\": \"Quaker Shoal\"\n                },\n                {\n                    \"id\": 175,\n                    \"name\": \"Green Shoal\"\n                },\n                {\n                    \"id\": 176,\n                    \"name\": \"Bedford Basin\"\n                },\n                {\n                    \"id\": 177,\n                    \"name\": \"Bigfish Shoal\"\n                },\n                {\n                    \"id\": 178,\n                    \"name\": \"Colt Shoal\"\n                },\n                {\n                    \"id\": 179,\n                    \"name\": \"Pleasant Shoal\"\n                },\n                {\n                    \"id\": 180,\n                    \"name\": \"Duncan Reef\"\n                },\n                {\n                    \"id\": 181,\n                    \"name\": \"Cronie Reef\"\n                },\n                {\n                    \"id\": 182,\n                    \"name\": \"Connor Reef\"\n                },\n                {\n                    \"id\": 183,\n                    \"name\": \"Portuguese Shoal\"\n                },\n                {\n                    \"id\": 184,\n                    \"name\": \"Head Rock Shoal\"\n                },\n                {\n                    \"id\": 185,\n                    \"name\": \"Neverfail Shoal\"\n                },\n                {\n                    \"id\": 186,\n                    \"name\": \"East Shoal\"\n                },\n                {\n                    \"id\": 187,\n                    \"name\": \"Nick Shoal\"\n                },\n                {\n                    \"id\": 188,\n                    \"name\": \"Little Pollock\"\n                },\n                {\n                    \"id\": 189,\n                    \"name\": \"Tribune Shoal\"\n                },\n                {\n                    \"id\": 190,\n                    \"name\": \"Shoal Ground\"\n                },\n                {\n                    \"id\": 191,\n                    \"name\": \"Horse Shoal\"\n                },\n                {\n                    \"id\": 192,\n                    \"name\": \"Mare Shoal\"\n                },\n                {\n                    \"id\": 193,\n                    \"name\": \"Warrens Shoal\"\n                },\n                {\n                    \"id\": 194,\n                    \"name\": \"Hume Shoal\"\n                },\n                {\n                    \"id\": 195,\n                    \"name\": \"Rous Shoal\"\n                },\n                {\n                    \"id\": 201,\n                    \"name\": \"Moores Ledge\"\n                },\n                {\n                    \"id\": 214,\n                    \"name\": \"Gordon Ground\"\n                },\n                {\n                    \"id\": 215,\n                    \"name\": \"Blow Breaker\"\n                },\n                {\n                    \"id\": 216,\n                    \"name\": \"Southeast Reef\"\n                },\n                {\n                    \"id\": 217,\n                    \"name\": \"South Ledge\"\n                },\n                {\n                    \"id\": 218,\n                    \"name\": \"Tickeys Shoal\"\n                },\n                {\n                    \"id\": 219,\n                    \"name\": \"Farm Ledge\"\n                }\n            ],\n            \"fish\": [\n                {\n                    \"id\": 92,\n                    \"scientific_name\": \"Amblyraja radiata\"\n                },\n                {\n                    \"id\": 600,\n                    \"scientific_name\": \"Clupea harengus\"\n                },\n                {\n                    \"id\": 804,\n                    \"scientific_name\": \"Enchelyopus cimbrius\"\n                },\n                {\n                    \"id\": 174,\n                    \"scientific_name\": \"Arctozenus risso\"\n                },\n                {\n                    \"id\": 332,\n                    \"scientific_name\": \"Callionymus bairdi\"\n                },\n                {\n                    \"id\": 408,\n                    \"scientific_name\": \"Centrolophus niger\"\n                },\n                {\n                    \"id\": 456,\n                    \"scientific_name\": \"Cetorhinus maximus\"\n                },\n                {\n                    \"id\": 364,\n                    \"scientific_name\": \"Capros aper\"\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact By Coordinates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a8c395c-80ab-43ed-8d5a-8f5bc7148880",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish'];\r",
									"    pm.expect(data.name).to.eql('Odyssey')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?latitude=43&longitude=-62",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "latitude",
									"value": "43",
									"description": "latitude coordinate"
								},
								{
									"key": "longitude",
									"value": "-62",
									"description": "longitude coordinate"
								}
							]
						},
						"description": "Returns the human impacts that occur near the coordinates specified in the query parameters."
					},
					"response": [
						{
							"name": "Get Human Impact By Coordinates",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?latitude=43&longitude=-62",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "latitude",
											"value": "43",
											"description": "latitude coordinate"
										},
										{
											"key": "longitude",
											"value": "-62",
											"description": "longitude coordinate"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "17214"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.5"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Oct 2020 22:07:36 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 57,\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 43,\n            \"longitude\": -62,\n            \"date\": \"10/11/1998\",\n            \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n            \"name\": \"Odyssey\",\n            \"oil_amount\": 132000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"location\": [\n                {\n                    \"id\": 51,\n                    \"name\": \"Little Lurcher\"\n                },\n                {\n                    \"id\": 52,\n                    \"name\": \"Lurcher Shoal\"\n                },\n                {\n                    \"id\": 63,\n                    \"name\": \"McDormand Patch\"\n                },\n                {\n                    \"id\": 73,\n                    \"name\": \"Mitchell Bay\"\n                },\n                {\n                    \"id\": 74,\n                    \"name\": \"Little Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 75,\n                    \"name\": \"Lang Shoal\"\n                },\n                {\n                    \"id\": 76,\n                    \"name\": \"Hardwood Island Shoal\"\n                },\n                {\n                    \"id\": 77,\n                    \"name\": \"Mackerel Shoal\"\n                },\n                {\n                    \"id\": 78,\n                    \"name\": \"Middle Ground\"\n                },\n                {\n                    \"id\": 79,\n                    \"name\": \"Lumpfish Shoal\"\n                },\n                {\n                    \"id\": 80,\n                    \"name\": \"Middle Shoal\"\n                },\n                {\n                    \"id\": 81,\n                    \"name\": \"Kitts Reef\"\n                },\n                {\n                    \"id\": 82,\n                    \"name\": \"Turners Shoal\"\n                },\n                {\n                    \"id\": 83,\n                    \"name\": \"Pollock Shoal\"\n                },\n                {\n                    \"id\": 84,\n                    \"name\": \"Pan Shoal\"\n                },\n                {\n                    \"id\": 85,\n                    \"name\": \"The Frenchman\"\n                },\n                {\n                    \"id\": 86,\n                    \"name\": \"Sammys Shoal\"\n                },\n                {\n                    \"id\": 87,\n                    \"name\": \"Hatch Cove Shoal\"\n                },\n                {\n                    \"id\": 88,\n                    \"name\": \"Calf Island Shoal\"\n                },\n                {\n                    \"id\": 89,\n                    \"name\": \"Thrumcap Shoal\"\n                },\n                {\n                    \"id\": 90,\n                    \"name\": \"MacKinley Shoal\"\n                },\n                {\n                    \"id\": 91,\n                    \"name\": \"Sand Shoal\"\n                },\n                {\n                    \"id\": 92,\n                    \"name\": \"Liscomb Shoal\"\n                },\n                {\n                    \"id\": 93,\n                    \"name\": \"Georges Mark\"\n                },\n                {\n                    \"id\": 94,\n                    \"name\": \"Wedge Shoal\"\n                },\n                {\n                    \"id\": 95,\n                    \"name\": \"Fleck Shoal\"\n                },\n                {\n                    \"id\": 96,\n                    \"name\": \"Nixons Mate Shoal\"\n                },\n                {\n                    \"id\": 97,\n                    \"name\": \"The Reef\"\n                },\n                {\n                    \"id\": 98,\n                    \"name\": \"Pride Shoal\"\n                },\n                {\n                    \"id\": 99,\n                    \"name\": \"Lawsons Shoal\"\n                },\n                {\n                    \"id\": 100,\n                    \"name\": \"George Pyes Shoal\"\n                },\n                {\n                    \"id\": 101,\n                    \"name\": \"Big Hawbolt Shoal\"\n                },\n                {\n                    \"id\": 102,\n                    \"name\": \"Peter Shoal\"\n                },\n                {\n                    \"id\": 103,\n                    \"name\": \"Flat Shoal\"\n                },\n                {\n                    \"id\": 104,\n                    \"name\": \"Lower Bay Shoal\"\n                },\n                {\n                    \"id\": 105,\n                    \"name\": \"Upper Bay Shoal\"\n                },\n                {\n                    \"id\": 106,\n                    \"name\": \"Stone Horse\"\n                },\n                {\n                    \"id\": 107,\n                    \"name\": \"Steves Shoal\"\n                },\n                {\n                    \"id\": 108,\n                    \"name\": \"White Knoll Ledge\"\n                },\n                {\n                    \"id\": 109,\n                    \"name\": \"Toots Shoal\"\n                },\n                {\n                    \"id\": 110,\n                    \"name\": \"The Hay Cock\"\n                },\n                {\n                    \"id\": 111,\n                    \"name\": \"East Bear Point Ledge\"\n                },\n                {\n                    \"id\": 112,\n                    \"name\": \"Houses Ground\"\n                },\n                {\n                    \"id\": 113,\n                    \"name\": \"Little Horse Race\"\n                },\n                {\n                    \"id\": 114,\n                    \"name\": \"Long Reef\"\n                },\n                {\n                    \"id\": 115,\n                    \"name\": \"Cross Ledge\"\n                },\n                {\n                    \"id\": 116,\n                    \"name\": \"Murray Shoal\"\n                },\n                {\n                    \"id\": 117,\n                    \"name\": \"Cunningham Reef\"\n                },\n                {\n                    \"id\": 118,\n                    \"name\": \"Huskins Reef\"\n                },\n                {\n                    \"id\": 119,\n                    \"name\": \"Liverpool Ledge\"\n                },\n                {\n                    \"id\": 120,\n                    \"name\": \"South Angle Ledge\"\n                },\n                {\n                    \"id\": 121,\n                    \"name\": \"Southwest Ledge\"\n                },\n                {\n                    \"id\": 122,\n                    \"name\": \"Horse Race\"\n                },\n                {\n                    \"id\": 123,\n                    \"name\": \"Cape Ledge\"\n                },\n                {\n                    \"id\": 124,\n                    \"name\": \"Inner Shoal\"\n                },\n                {\n                    \"id\": 125,\n                    \"name\": \"Hero Shoal\"\n                },\n                {\n                    \"id\": 126,\n                    \"name\": \"Congress Shoal\"\n                },\n                {\n                    \"id\": 127,\n                    \"name\": \"Mid Ledge\"\n                },\n                {\n                    \"id\": 128,\n                    \"name\": \"Doddys Shoal\"\n                },\n                {\n                    \"id\": 129,\n                    \"name\": \"Cooks Ledge\"\n                },\n                {\n                    \"id\": 130,\n                    \"name\": \"Daniel Shoal\"\n                },\n                {\n                    \"id\": 131,\n                    \"name\": \"Stoney Island Shoal\"\n                },\n                {\n                    \"id\": 132,\n                    \"name\": \"Lovetts Shoal\"\n                },\n                {\n                    \"id\": 133,\n                    \"name\": \"Newellton Reef\"\n                },\n                {\n                    \"id\": 134,\n                    \"name\": \"Soldiers Ledge\"\n                },\n                {\n                    \"id\": 135,\n                    \"name\": \"Adamant Shoal\"\n                },\n                {\n                    \"id\": 137,\n                    \"name\": \"St. Margarets Bay\"\n                },\n                {\n                    \"id\": 138,\n                    \"name\": \"Big Fish Shoal\"\n                },\n                {\n                    \"id\": 139,\n                    \"name\": \"Middle Patch\"\n                },\n                {\n                    \"id\": 140,\n                    \"name\": \"Backmans Shoal\"\n                },\n                {\n                    \"id\": 141,\n                    \"name\": \"Sand Cove Head Shoal\"\n                },\n                {\n                    \"id\": 142,\n                    \"name\": \"Spectacle Shoal\"\n                },\n                {\n                    \"id\": 143,\n                    \"name\": \"Northeast Coachman\"\n                },\n                {\n                    \"id\": 144,\n                    \"name\": \"Sand Cove Shoal\"\n                },\n                {\n                    \"id\": 145,\n                    \"name\": \"Northeast Shoal\"\n                },\n                {\n                    \"id\": 146,\n                    \"name\": \"Nose Shoal\"\n                },\n                {\n                    \"id\": 147,\n                    \"name\": \"Dogfish Ground\"\n                },\n                {\n                    \"id\": 148,\n                    \"name\": \"Gull Shoal\"\n                },\n                {\n                    \"id\": 149,\n                    \"name\": \"Southeast Shoal\"\n                },\n                {\n                    \"id\": 150,\n                    \"name\": \"Spectacle Shoals\"\n                },\n                {\n                    \"id\": 151,\n                    \"name\": \"Jack Langilles Shoal\"\n                },\n                {\n                    \"id\": 152,\n                    \"name\": \"Bella Shoal\"\n                },\n                {\n                    \"id\": 153,\n                    \"name\": \"Young Ledge\"\n                },\n                {\n                    \"id\": 154,\n                    \"name\": \"Graves Shoal\"\n                },\n                {\n                    \"id\": 155,\n                    \"name\": \"Frog Island Shoal\"\n                },\n                {\n                    \"id\": 156,\n                    \"name\": \"Middle Shoals\"\n                },\n                {\n                    \"id\": 157,\n                    \"name\": \"Sculpin Shoal\"\n                },\n                {\n                    \"id\": 158,\n                    \"name\": \"Lynch Shoal\"\n                },\n                {\n                    \"id\": 159,\n                    \"name\": \"Western Lobster Claw\"\n                },\n                {\n                    \"id\": 160,\n                    \"name\": \"Southeast Shoals\"\n                },\n                {\n                    \"id\": 161,\n                    \"name\": \"Haddock Shoal\"\n                },\n                {\n                    \"id\": 162,\n                    \"name\": \"South Shoal\"\n                },\n                {\n                    \"id\": 163,\n                    \"name\": \"Hutt Shoal\"\n                },\n                {\n                    \"id\": 164,\n                    \"name\": \"West Shoals\"\n                },\n                {\n                    \"id\": 165,\n                    \"name\": \"Blandford Shoal\"\n                },\n                {\n                    \"id\": 166,\n                    \"name\": \"Five Finger Shoal\"\n                },\n                {\n                    \"id\": 167,\n                    \"name\": \"The Grampus\"\n                },\n                {\n                    \"id\": 168,\n                    \"name\": \"Meisners Shoal\"\n                },\n                {\n                    \"id\": 169,\n                    \"name\": \"Shad Bay Breakers\"\n                },\n                {\n                    \"id\": 170,\n                    \"name\": \"Kitiwiti Shoal\"\n                },\n                {\n                    \"id\": 171,\n                    \"name\": \"Birch Shoal\"\n                },\n                {\n                    \"id\": 172,\n                    \"name\": \"Round Shoal\"\n                },\n                {\n                    \"id\": 173,\n                    \"name\": \"Slaunwhites Shoal\"\n                },\n                {\n                    \"id\": 174,\n                    \"name\": \"Quaker Shoal\"\n                },\n                {\n                    \"id\": 175,\n                    \"name\": \"Green Shoal\"\n                },\n                {\n                    \"id\": 176,\n                    \"name\": \"Bedford Basin\"\n                },\n                {\n                    \"id\": 177,\n                    \"name\": \"Bigfish Shoal\"\n                },\n                {\n                    \"id\": 178,\n                    \"name\": \"Colt Shoal\"\n                },\n                {\n                    \"id\": 179,\n                    \"name\": \"Pleasant Shoal\"\n                },\n                {\n                    \"id\": 180,\n                    \"name\": \"Duncan Reef\"\n                },\n                {\n                    \"id\": 181,\n                    \"name\": \"Cronie Reef\"\n                },\n                {\n                    \"id\": 182,\n                    \"name\": \"Connor Reef\"\n                },\n                {\n                    \"id\": 183,\n                    \"name\": \"Portuguese Shoal\"\n                },\n                {\n                    \"id\": 184,\n                    \"name\": \"Head Rock Shoal\"\n                },\n                {\n                    \"id\": 185,\n                    \"name\": \"Neverfail Shoal\"\n                },\n                {\n                    \"id\": 186,\n                    \"name\": \"East Shoal\"\n                },\n                {\n                    \"id\": 187,\n                    \"name\": \"Nick Shoal\"\n                },\n                {\n                    \"id\": 188,\n                    \"name\": \"Little Pollock\"\n                },\n                {\n                    \"id\": 189,\n                    \"name\": \"Tribune Shoal\"\n                },\n                {\n                    \"id\": 190,\n                    \"name\": \"Shoal Ground\"\n                },\n                {\n                    \"id\": 191,\n                    \"name\": \"Horse Shoal\"\n                },\n                {\n                    \"id\": 192,\n                    \"name\": \"Mare Shoal\"\n                },\n                {\n                    \"id\": 193,\n                    \"name\": \"Warrens Shoal\"\n                },\n                {\n                    \"id\": 194,\n                    \"name\": \"Hume Shoal\"\n                },\n                {\n                    \"id\": 195,\n                    \"name\": \"Rous Shoal\"\n                },\n                {\n                    \"id\": 201,\n                    \"name\": \"Moores Ledge\"\n                },\n                {\n                    \"id\": 214,\n                    \"name\": \"Gordon Ground\"\n                },\n                {\n                    \"id\": 215,\n                    \"name\": \"Blow Breaker\"\n                },\n                {\n                    \"id\": 216,\n                    \"name\": \"Southeast Reef\"\n                },\n                {\n                    \"id\": 217,\n                    \"name\": \"South Ledge\"\n                },\n                {\n                    \"id\": 218,\n                    \"name\": \"Tickeys Shoal\"\n                },\n                {\n                    \"id\": 219,\n                    \"name\": \"Farm Ledge\"\n                }\n            ],\n            \"fish\": [\n                {\n                    \"id\": 92,\n                    \"scientific_name\": \"Amblyraja radiata\"\n                },\n                {\n                    \"id\": 600,\n                    \"scientific_name\": \"Clupea harengus\"\n                },\n                {\n                    \"id\": 804,\n                    \"scientific_name\": \"Enchelyopus cimbrius\"\n                },\n                {\n                    \"id\": 174,\n                    \"scientific_name\": \"Arctozenus risso\"\n                },\n                {\n                    \"id\": 332,\n                    \"scientific_name\": \"Callionymus bairdi\"\n                },\n                {\n                    \"id\": 408,\n                    \"scientific_name\": \"Centrolophus niger\"\n                },\n                {\n                    \"id\": 456,\n                    \"scientific_name\": \"Cetorhinus maximus\"\n                },\n                {\n                    \"id\": 364,\n                    \"scientific_name\": \"Capros aper\"\n                }\n            ]\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Contains Human Impact/Effect Related requests/queries\r\n\r\n**Description of Return Types**\r\n\r\n\"total_impact_count\" = total number of human impacts in database\r\n\r\n\"total_impact_returned\" = total number of instances returned\r\n\r\n\"id\" = the id of the impact\r\n\r\n\"category\" = category of the impact\r\n\r\n\"subcategory\" = subcategory of the impact\r\n\r\n\"latitude\" = latitude coordinate of impact\r\n\r\n\"longitude\" = longitude coordinate of impact\r\n\r\n\"date\" = date impact occurred\r\n\r\n\"description\" = description of impact\r\n\r\n\"name\" = name associated with impact\r\n\r\n\"oil amount\" = amount of oil spilled (if applicable)\r\n\r\n\"count_density_1\" = density of 0.33-1.00mm sized plastic pieces\r\n\r\n\"count_density_2\" = density of 1.01-4.75mm sized plastic pieces\r\n\r\n\"count_density_3\" = density of 4.76-200mm sized plastic pieces\r\n\r\n\"count_density_4\" = density of 200+mm sized plastic pieces\r\n\r\n\"plant_rating\" = rating for the power plant\r\n\r\n\"plant_location\": = location of power plant\r\n\r\n\"plant_water_source\": = water source of power plant\r\n\r\n\"catch_year\" = year the catch rate data was recorded\r\n\r\n\"location\" = array of location ids that are related to this impact\r\n\r\n\"fish\" = array of fish ids that are related to impact",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fae4e7ba-beaa-42d2-9077-cee05651d178",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65ee53f2-864e-4da7-a57c-2fdc40a8783e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.any.keys('data');",
							"});",
							"pm.test(\"Check Data in Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish')",
							"});",
							"",
							"",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7f795792-f8fe-4d67-89eb-f291290df728",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3fcceb49-90f4-468e-ba96-05e7b30be2fe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cbf9f545-e9fb-4b55-881b-659ace7839b2",
			"key": "base_url",
			"value": "http://www.conservocean.me"
		}
	],
	"protocolProfileBehavior": {}
}