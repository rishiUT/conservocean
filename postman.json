{
	"info": {
		"_postman_id": "5cb09ad6-1883-46e8-8573-aae7b9ae3488",
		"name": "ConservOcean API",
		"description": "This API's endpoints are seperated into 3 sections: fish, bodies of water, and human impacts.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Fish",
			"item": [
				{
					"name": "Get all Fish",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a88cf04c-c2a9-4447-8185-775687390199",
								"exec": [
									"pm.test(\"Check Keys in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(2);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?limit=2&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "Maximum number of fish to return\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Which index to start querying from"
								}
							]
						},
						"description": "Returns all the fish instances avaliable. You can specify the limit (the maximum number to return) and offset (the index to start query from) query parameters to refine the return. If no limit or offset defined then return all of the fish instances."
					},
					"response": [
						{
							"name": "Get all Fish",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?limit=2&offset=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Maximum number of fish to return\n"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Which index to start querying from"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "2519"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:04:53 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 2,\n            \"scientific_name\": \"Abudefduf abdominalis\",\n            \"common_name\": \"Green damselfish\",\n            \"species\": \"abdominalis\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 30,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Ababd_u0.jpg\",\n            \"description\": \"Found in quiet waters with rocky bottoms in inshore and offshore reefs; juveniles sometimes found in surge pools (Ref. 205).  Benthopelagic (Ref. 58302).  Adults form school.  Feed on a variety of algae and zooplankton.  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).  Used as food by the Hawaiians (Ref. 7364).\",\n            \"speccode\": 6652,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b23d0e2-afab-448c-a776-d78d5f25d995",
								"exec": [
									"pm.test(\"Check Key in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'location', 'human_impact_ids', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data;",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"type": "string",
									"description": "Id of the specific fish you want to return"
								}
							]
						},
						"description": "Get a fish by the specified ID passed into with the id path parameter.\n\nThe response body includes the ids of all of th related instances from other models."
					},
					"response": [
						{
							"name": "Get Fish By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string",
											"description": "Id of the specific fish you want to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "4665"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:05:16 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 1,\n        \"scientific_name\": \"Ablennes hians\",\n        \"common_name\": \"Flat needlefish\",\n        \"species\": \"hians\",\n        \"genus\": \"Ablennes\",\n        \"family\": \"No Family\",\n        \"habitat\": \"0 -1 -1\",\n        \"endanger_status\": \"LC\",\n        \"population_trend\": \"Unknown\",\n        \"average_size\": 140,\n        \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n        \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n        \"speccode\": 972,\n        \"catch_year\": \"2018\",\n        \"catch_rate\": 22,\n        \"model\": \"fish\",\n        \"location\": [\n            {\n                \"id\": 1,\n                \"name\": \"Biscayne Bay\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"Honolua Bay\"\n            }\n        ],\n        \"human_impact_ids\": {\n            \"plastic_pollution\": [\n                23,\n                12,\n                24,\n                25,\n                22,\n                26,\n                13,\n                27,\n                14,\n                40,\n                41,\n                28,\n                15,\n                29,\n                16,\n                32,\n                17,\n                31,\n                18,\n                19,\n                34,\n                35,\n                20,\n                21,\n                71,\n                89,\n                88,\n                81,\n                85,\n                72,\n                73,\n                80,\n                74,\n                91,\n                97,\n                79,\n                70,\n                98,\n                92,\n                75,\n                78,\n                86,\n                84,\n                76,\n                69,\n                83,\n                82,\n                77,\n                128,\n                146,\n                135,\n                145,\n                138,\n                142,\n                129,\n                130,\n                137,\n                131,\n                148,\n                154,\n                136,\n                127,\n                149,\n                132,\n                143,\n                155,\n                141,\n                133,\n                126,\n                140,\n                139,\n                134,\n                42,\n                30,\n                43,\n                33,\n                36,\n                37,\n                38,\n                39,\n                44,\n                45,\n                46,\n                47,\n                48,\n                49,\n                50,\n                51,\n                117,\n                118,\n                119,\n                120,\n                121,\n                123,\n                124,\n                147,\n                151,\n                153,\n                157,\n                158,\n                161,\n                162,\n                163,\n                164,\n                165,\n                166,\n                167,\n                168,\n                170,\n                171,\n                172,\n                173,\n                174,\n                175\n            ],\n            \"coal_power_plants\": [\n                195,\n                215,\n                238,\n                183,\n                184,\n                185,\n                186,\n                187,\n                188,\n                189,\n                190,\n                191,\n                192,\n                193,\n                194,\n                196,\n                197,\n                198,\n                199,\n                200,\n                202,\n                203,\n                205,\n                206,\n                211,\n                212,\n                241,\n                240\n            ],\n            \"offshore_oil_spills\": [],\n            \"tanker_oil_spills\": []\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get Fish By Common Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f44f981a-dad4-47af-b266-23b8aa4daf03",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?common_name=Flat needlefish",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "common_name",
									"value": "Flat needlefish",
									"description": "The common name of the fish you want to query for"
								}
							]
						},
						"description": "Returns the fish associated with the common_name query parameter"
					},
					"response": [
						{
							"name": "Get Fish By Common Name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?common_name=Flat needlefish",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "common_name",
											"value": "Flat needlefish",
											"description": "The common name of the fish you want to query for"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1460"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:05:42 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Species",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5808078b-a8cd-4aa1-a0c6-6a1a1acb2efa",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?species=hians",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "species",
									"value": "hians",
									"description": "The species of fish you want to query for\n"
								}
							]
						},
						"description": "Returns the fish that matches the species query parameter"
					},
					"response": [
						{
							"name": "Get Fish By Species",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?species=hians",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "species",
											"value": "hians",
											"description": "The species of fish you want to query for\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1460"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:06:43 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Genus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8134951-ac59-421d-a1f1-9d3b7693e222",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?genus=Ablennes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "genus",
									"value": "Ablennes",
									"description": "The genus of fish you want to query for"
								}
							]
						},
						"description": "Returns the fish that matches the genus query parameter"
					},
					"response": [
						{
							"name": "Get Fish By Genus",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?genus=Ablennes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "genus",
											"value": "Ablennes",
											"description": "The genus of fish you want to query for"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1460"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								},
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:07:22 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Family",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68a356e1-87c5-4e6f-a961-b2b47e81785c",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?family=No Family&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "family",
									"value": "No Family",
									"description": "Family you want to filter by"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Returns the fish that matches the family query parameter"
					},
					"response": [
						{
							"name": "Get Fish By Family",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?family=No Family&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "family",
											"value": "No Family",
											"description": "Family you want to filter by"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:09:29 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1460"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Endangered Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be76fe8f-69f5-4825-a89f-ea97476d4a86",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?status=LC&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "status",
									"value": "LC",
									"description": "The IUCN category status to query fish for.\n"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Returns all the fish that have the status of one of the below categories passed in with the status query parameter.\n<br>\n<br>IUCN Red List Categories available at this link: https://iucn-csg.org/red-list-categories/\n<br>\n<br>EXTINCT (EX)\n<br>EXTINCT IN THE WILD (EW)\n<br> CRITICALLY ENDANGERED (CR)\n<br> ENDANGERED (EN)\n<br> VULNERABLE (VU)\n<br> NEAR THREATENED (NT)\n<br> LEAST CONCERN (LC)\n<br> DATA DEFICIENT (DD)\n<br> NOT EVALUATED (NE)"
					},
					"response": [
						{
							"name": "Get Fish By Endangered Status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?status=LC&limit=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "status",
											"value": "LC",
											"description": "The IUCN category status to query fish for.\n"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:09:53 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "12336"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 10,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 2,\n            \"scientific_name\": \"Abudefduf abdominalis\",\n            \"common_name\": \"Green damselfish\",\n            \"species\": \"abdominalis\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 30,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Ababd_u0.jpg\",\n            \"description\": \"Found in quiet waters with rocky bottoms in inshore and offshore reefs; juveniles sometimes found in surge pools (Ref. 205).  Benthopelagic (Ref. 58302).  Adults form school.  Feed on a variety of algae and zooplankton.  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).  Used as food by the Hawaiians (Ref. 7364).\",\n            \"speccode\": 6652,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 3,\n            \"scientific_name\": \"Abudefduf lorenzi\",\n            \"common_name\": \"Black-tail sergeant\",\n            \"species\": \"lorenzi\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 18,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Ablor_u2.jpg\",\n            \"description\": \"Adults inhabit protected coastal areas often around docks or breakwaters (Ref. 7247).  Often found in loose aggregations or widely scattered individuals near or along shorelines (Ref. 90102).  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).\",\n            \"speccode\": 5685,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 4,\n            \"scientific_name\": \"Abudefduf notatus\",\n            \"common_name\": \"Yellowtail sergeant\",\n            \"species\": \"notatus\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 17,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abnot_u4.jpg\",\n            \"description\": \"Found in small groups along upper edges of sheltered drop-offs.  Also found in rocky inshore reefs with moderate to strong wave action.  In roving aggregations and somewhat difficult to approach (Ref. 9710).  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).\",\n            \"speccode\": 5686,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 5,\n            \"scientific_name\": \"Abudefduf saxatilis\",\n            \"common_name\": \"Sergeant-major\",\n            \"species\": \"saxatilis\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 23,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Absax_u7.jpg\",\n            \"description\": \"Juveniles are common in tide pools while adults are found over shallow reef tops.  Adults frequently form large feeding aggregations of up to several hundred individuals.  Food items include algae, small crustaceans and fish, and various invertebrate larvae (Ref. 3139).  At Fernando de Noronha Archipelago, this species feeds on spinner dolphins’ feces and vomits. The offal feeding may be regarded as a simple behavioral shift from plankton feeding to drifting offal picking.  Also, juveniles may hold cleaning stations together with the doctorfish (<i>Acanthurus chirurgus</i>) and the blue tang (<i>Acanthurus coeruleus</i>) and graze algae as well as pick molted skin and parasites from green turtles (<i>Chelonia mydas </i>).  This behavior is preceded by a characteristic inspection usually followed by feeding nips on the turtles’ skin (head, limbs, and tail), as well as on the carapace. The most inspected and cleaned body parts are the flippers (Ref. 48727, 51385).  Adult males adopt a bluish ground color when guarding eggs.  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Attracted to divers who feed fish.  Marketed fresh (Ref. 3139).  Has been reared in captivity (Ref. 35420).\",\n            \"speccode\": 1119,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 6,\n            \"scientific_name\": \"Abudefduf sexfasciatus\",\n            \"common_name\": \"Scissortail sergeant\",\n            \"species\": \"sexfasciatus\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 19,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Absex_u0.jpg\",\n            \"description\": \"Adults inhabit inshore and offshore coral or rocky reefs.  Also in shallow coastal reef flats or crests, usually where lots of tall soft corals or hydroid colonies are present (Ref. 48636).  Often found in groups feeding at midwater or tending nests among rocks and coral ledges (Ref. 90102).  Feed on zooplankton and algae and aggregates high in the water column (Ref. 9710).  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).\",\n            \"speccode\": 5688,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 7,\n            \"scientific_name\": \"Abudefduf sordidus\",\n            \"common_name\": \"Blackspot sergeant\",\n            \"species\": \"sordidus\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 24,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Absor_u0.jpg\",\n            \"description\": \"Inhabit rocky lagoons, reef flat shorelines and piers subject to mild surge; juveniles are common in tide pools (Ref. 9710).  Benthopelagic (Ref. 58302).  Occasionally form schools.  Feed on algae, crustaceans and other invertebrates during the day.  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).  Highly territorial (Ref. 9710).  Utilized as a food fish by the Hawaiians (Ref. 7364).\",\n            \"speccode\": 5689,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 8,\n            \"scientific_name\": \"Abudefduf taurus\",\n            \"common_name\": \"Night sergeant\",\n            \"species\": \"taurus\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 25,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abtau_u2.jpg\",\n            \"description\": \"Adults inhabit rocky inshore reefs.  They prefer wave-cut rock ledges or limestone shorelines and tide pools in regions with surf.  Feed mainly on algae but adults also consume <i>Zoanthus</i> and hydroids while juveniles also feed on copepods (Ref. 9626).  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).  Marketed fresh (Ref. 3139).\",\n            \"speccode\": 1120,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 9,\n            \"scientific_name\": \"Abudefduf troschelii\",\n            \"common_name\": \"Panamic sergeant major\",\n            \"species\": \"troschelii\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 20,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abtro_u2.jpg\",\n            \"description\": \"Adults inhabit rocky and coral reefs (Ref. 9334).  Usually in large aggregations.  These diurnal feeders feed on plankton at the surface or mid-water;  also graze on benthic invertebrates and algae on the reef.  Breed during early summer in the Gulf and continues throughout the summer until fall.  This fish is a warm-water, stenothermal species.  Juveniles of second year class have been observed cleaning schools of striped mullet, halfbeaks and needlefish (Ref. 5592).  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).\",\n            \"speccode\": 8245,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 10,\n            \"scientific_name\": \"Abudefduf vaigiensis\",\n            \"common_name\": \"Indo-Pacific sergeant\",\n            \"species\": \"vaigiensis\",\n            \"genus\": \"Abudefduf\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 20,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abvai_u9.jpg\",\n            \"description\": \"Adults inhabit upper edge of outer reef slopes and inshore rocky reefs.  Juveniles associated with drifting seaweed (Ref. 12114, 12115).  Benthopelagic (Ref. 58302).  Feed on  zooplankton, benthic algae, and small invertebrates (Ref. 1602).  Often in aggregations (Ref. 9710) feeding at midwater or tending nests among rocks and coral ledges (Ref. 90102).  In large numbers at spawning sites that are timed with large tides that carry their pelagic offspring far offshore (Ref. 48636).  Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).\",\n            \"speccode\": 6630,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish By Population",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3aa054b1-4fcf-4d3b-bb98-ce75354fa0bd",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Ablennes hians')",
									"    pm.expect(data.common_name).to.eql('Flat needlefish')",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?population_trend=Unknown&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "population_trend",
									"value": "Unknown",
									"description": "The population trend you want to filter for"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Filter based on the categories of population trend in one of these categories ['Unknown', 'Stable', 'Increasing', 'Decreasing']"
					},
					"response": [
						{
							"name": "Get Fish By Population",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?population_trend=Unknown&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "population_trend",
											"value": "Unknown",
											"description": "The population trend you want to filter for"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:11:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1460"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"scientific_name\": \"Ablennes hians\",\n            \"common_name\": \"Flat needlefish\",\n            \"species\": \"hians\",\n            \"genus\": \"Ablennes\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 -1 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 140,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Abhia_m0.jpg\",\n            \"description\": \"Inhabits neritic and oceanic waters but more often found near islands (Ref. 5213).  Found in estuaries (Ref. 26340), and coastal rivers (Ref. 33587).  Sometimes forming large schools (Ref. 5217).  Feeds mainly on small fishes (Ref. 9279).  Oviparous (Ref. 205).  Eggs may be found attached to objects in the water by filaments on the egg's surface (Ref. 205). Since the jaws are frequently broken, the maximum length is given as body length excluding head and caudal fin.  Usually caught with the help of artificial lights (Ref. 9279).  Marketed  fresh and salted; smoked or frozen (Ref. 9987).  Market limited due to the green-colored flesh (Ref. 5217).  In females, only left gonad is developed, and in males the right gonad is small or absent (Ref. 26938).\",\n            \"speccode\": 972,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 22,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish by Size",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "459e427d-b855-4950-b510-0376d590080b",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')\r",
									"});\r",
									"\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.scientific_name).to.eql('Acanthemblemaria aspera')\r",
									"    pm.expect(data.common_name).to.eql('Roughhead blenny')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_fish_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?size_min=1&size_max=10&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "size_min",
									"value": "1",
									"description": "Minimum average length of a fish, inclusive"
								},
								{
									"key": "size_max",
									"value": "10",
									"description": "Maximum average length of a fish, inclusive"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Get fish by average length, with a specified range"
					},
					"response": [
						{
							"name": "Get Fish by Size",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?size_min=1&size_max=10&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "size_min",
											"value": "1",
											"description": "Minimum average length of a fish, inclusive"
										},
										{
											"key": "size_max",
											"value": "10",
											"description": "Maximum average length of a fish, inclusive"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:11:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "992"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 12,\n            \"scientific_name\": \"Acanthemblemaria aspera\",\n            \"common_name\": \"Roughhead blenny\",\n            \"species\": \"aspera\",\n            \"genus\": \"Acanthemblemaria\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 4,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Acasp_u0.jpg\",\n            \"description\": \"Almost always found in holes of corals.  Feed on amphipods and copepods (Ref. 5521).  Main diet of  benthic harpacticoid copepods (Ref. 94105).   Oviparous (Ref. 56066).  Eggs are attached to the walls of the parent's shelter and are brooded by the male parent (Ref. 56066).\",\n            \"speccode\": 3708,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Fish with Sort and Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d586f41-80a2-42e5-b5c2-2bed15a76503",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'scientific_name', 'common_name', 'species', 'genus', 'family', 'habitat', 'endanger_status', 'population_trend', 'average_size', 'picture_url', 'description', 'speccode', 'catch_year', 'catch_rate', 'model')",
									"});",
									"",
									"pm.test(\"Check Data in Response Body\", function () {",
									"    const jsonData = pm.response.json();",
									"    const data = jsonData.data[0];",
									"    pm.expect(data.scientific_name).to.eql('Centropyge abei')",
									"    pm.expect(data.common_name).to.eql(\"Abe's angelfish\")",
									"});",
									"pm.test(\"Check Returned Number\", function () {",
									"    const jsonData = pm.response.json();",
									"    const num = jsonData.total_fish_returned;",
									"    pm.expect(num).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/fish?sort=common_name&ascending=true&status=LC&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"fish"
							],
							"query": [
								{
									"key": "sort",
									"value": "common_name",
									"description": "the attribute you want to sort by"
								},
								{
									"key": "ascending",
									"value": "true",
									"description": "ascending option for sorting (true by default)"
								},
								{
									"key": "status",
									"value": "LC",
									"description": "combining sort and filter"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "maximum number of fish to return\n"
								}
							]
						},
						"description": "<h6>For fish we can sort by </h6>\n<ul>\n    <li>common_name</li>\n    <li>genus</li>\n    <li>species</li>\n    <li>status</li>\n    <li>average_size</li>\n</ul>\n\n<h6>For fish we can filter by </h6>\n<li>common_name</li>\n    <li>population_trend (['Unknown', 'Stable', 'Increasing', 'Decreasing']</li>\n    <li>genus</li>\n    <li>status (['DD', 'LC', 'NT', 'VU', 'EN', 'CR', 'EW', 'EX'])</li>\n    <li>family</li>\n    <li>habitat (String of 3 numbers) \n        <ul>\n           <li>-1 0 0: Freshwater fish</li>\n           <li>0 -1 0: Brackish fish</li>\n           <li>0 0 -1: Saltwater fish</li>\n           <li> Can be a combination of those values to show it lives in more than one type of water\n            ex: -1 -1 0 means found in both fresh and brackish water</li>\n        </ul>\n    </li>"
					},
					"response": [
						{
							"name": "Get Fish with Sort and Filter",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/fish?sort=common_name&ascending=true&status=LC&limit=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"fish"
									],
									"query": [
										{
											"key": "sort",
											"value": "common_name",
											"description": "the attribute you want to sort by"
										},
										{
											"key": "ascending",
											"value": "true",
											"description": "ascending option for sorting (true by default)"
										},
										{
											"key": "status",
											"value": "LC",
											"description": "combining sort and filter"
										},
										{
											"key": "limit",
											"value": "10",
											"description": "maximum number of fish to return\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:11:53 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "8842"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_fish_count\": 1301,\n    \"total_fish_returned\": 10,\n    \"data\": [\n        {\n            \"id\": 418,\n            \"scientific_name\": \"Centropyge abei\",\n            \"common_name\": \"Abe's angelfish\",\n            \"species\": \"abei\",\n            \"genus\": \"Centropyge\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 9,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Ceabe_u0.jpg\",\n            \"description\": \"Found over bottom that is  primarily composed of variably sized rubble, with temperature 20-21°C (Ref. 77035).\",\n            \"speccode\": 64214,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 169,\n            \"scientific_name\": \"Apterichtus ansp\",\n            \"common_name\": \"Academy eel\",\n            \"species\": \"ansp\",\n            \"genus\": \"Apterichtus\",\n            \"family\": \"Ophichthinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 54,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Apans_u0.gif\",\n            \"description\": \"Burrows in sand in surf areas.\",\n            \"speccode\": 2635,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 21,\n            \"scientific_name\": \"Acanthurus achilles\",\n            \"common_name\": \"Achilles tang\",\n            \"species\": \"achilles\",\n            \"genus\": \"Acanthurus\",\n            \"family\": \"Acanthurinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 24,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Acach_u8.jpg\",\n            \"description\": \"Occurs in clear seaward reefs, usually in groups (Ref. 9710).  Benthopelagic (Ref. 58302).  Feeds on filamentous and small fleshy algae (Ref. 9267).  Monogamous (Ref. 52884).  Spine in caudal peduncle may be venomous.  Size of metamorphosis from postlarva stage to juvenile is 6 cm (Ref. 9267).  This species sometimes hybridizes with <i>A. nigricans</i> (Ref. 9808).\",\n            \"speccode\": 4306,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 620,\n            \"scientific_name\": \"Coris gaimard\",\n            \"common_name\": \"African coris\",\n            \"species\": \"gaimard\",\n            \"genus\": \"Coris\",\n            \"family\": \"Corinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 40,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Cogai_u0.jpg\",\n            \"description\": \"A solitary species (Ref. 90102) found in areas of mixed coral, sand and rubble of exposed outer reef flats, lagoon and seaward reefs (Ref. 1602, 48636).  Benthopelagic (Ref. 58302).  Feeds mainly on mollusks, crabs, and hermit crabs, and occasionally on tunicates and forams (Ref. 1602).\",\n            \"speccode\": 5625,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 61,\n            \"scientific_name\": \"Alectis ciliaris\",\n            \"common_name\": \"African pompano\",\n            \"species\": \"ciliaris\",\n            \"genus\": \"Alectis\",\n            \"family\": \"Caranginae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 150,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Alcil_u7.jpg\",\n            \"description\": \"Pelagic in neritic and oceanic waters, sometimes near the bottom (Ref. 5217, 58302).  Small juveniles may be found near the shore (Ref. 5217); adults near bottom  to depths of 60 m (Ref. 26938).  Feed on sedentary or slow moving crustaceans and occasionally feed on small crabs and fishes (Ref. 9283).  Juveniles are attractive aquarium fish, but do not do well in captivity (Ref. 12484).  Excellent food fish (Ref. 9626); marketed fresh or dried or salted (Ref. 9283).\",\n            \"speccode\": 988,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 5,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 110,\n            \"scientific_name\": \"Anarchias allardicei\",\n            \"common_name\": \"Allardice's moray\",\n            \"species\": \"allardicei\",\n            \"genus\": \"Anarchias\",\n            \"family\": \"Uropterygiinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 17,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Anall_f0.jpg\",\n            \"description\": \"Inhabits the interstices of the reef. Benthic (Ref. 58302).\",\n            \"speccode\": 6483,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 1060,\n            \"scientific_name\": \"Labropsis alleni\",\n            \"common_name\": \"Allen's tubelip\",\n            \"species\": \"alleni\",\n            \"genus\": \"Labropsis\",\n            \"family\": \"No Family\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 10,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Laall_u0.jpg\",\n            \"description\": \"Occurs in lagoon and seaward reefs, in areas with dense coral growth (Ref. 9710) and on steep slopes, solitary or in pairs (Ref. 90102).  Probably feeds on coral polyps (Ref. 6023).  Juveniles clean other fishes.\",\n            \"speccode\": 4863,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 707,\n            \"scientific_name\": \"Decapterus muroadsi\",\n            \"common_name\": \"Amberstripe scad\",\n            \"species\": \"muroadsi\",\n            \"genus\": \"Decapterus\",\n            \"family\": \"Caranginae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 50,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Demur_u3.jpg\",\n            \"description\": \"Adults are pelagic (Ref. 58302), in oceanic and inshore waters (Ref. 9563) forming schools (Ref. 9283).  They feed mainly on planktonic invertebrates (Ref. 9283).  Marketed fresh and salted or dried (Ref. 9283).\",\n            \"speccode\": 12302,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 552,\n            \"scientific_name\": \"Chromis amboinensis\",\n            \"common_name\": \"Ambon chromis\",\n            \"species\": \"amboinensis\",\n            \"genus\": \"Chromis\",\n            \"family\": \"Pomacentrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Stable\",\n            \"average_size\": 10,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Chamb_u3.jpg\",\n            \"description\": \"Adults inhabit coral-rich areas of clear lagoon and seaward reefs.  Abundant on steep outer reef slopes below 24 m, uncommon in lagoons. Juveniles in large branching corals, adults mainly in caves (Ref. 48636).  Found in aggregations (Ref. 9710).  Diurnal species (Ref. 54980; 113699). Oviparous, distinct pairing during breeding (Ref. 205).  Eggs are demersal and adhere to the substrate (Ref. 205).  Males guard and aerate the eggs (Ref. 205).\",\n            \"speccode\": 5671,\n            \"catch_year\": null,\n            \"catch_rate\": null,\n            \"model\": \"fish\"\n        },\n        {\n            \"id\": 606,\n            \"scientific_name\": \"Conger oceanicus\",\n            \"common_name\": \"American conger\",\n            \"species\": \"oceanicus\",\n            \"genus\": \"Conger\",\n            \"family\": \"Congrinae\",\n            \"habitat\": \"0 0 -1\",\n            \"endanger_status\": \"LC\",\n            \"population_trend\": \"Unknown\",\n            \"average_size\": 230,\n            \"picture_url\": \"https://www.fishbase.de/images/species/Cooce_u0.jpg\",\n            \"description\": \"Occurs from shallow inshore waters to depths of 477 m and up to 260 m in the Gulf of Maine (Ref. 7135).  Benthic (Ref. 5951).  Nocturnal predators  (Ref. 93252). Feeds mainly on fishes, but also on shrimps and small shellfish.  Commonly caught by anglers along piers, docks and jetties in middle Atlantic states.\",\n            \"speccode\": 300,\n            \"catch_year\": \"2018\",\n            \"catch_rate\": 40,\n            \"model\": \"fish\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Fish related queries/request\n\n**Description of Return Types**\n\n\"total_fish_count\" = total number of fishes in database\n\n\"total_fish_returned\" = total number of instances returned\n\n\"id\" = the id of the fish\n\n\"scientific_name\" = scientific name of the fish,\n\n\"common_name\" = common name of the fish\n\n\"species\" = specie of the fish\n\n\"genus\" = genus of the fish\n\n\"family\" = family of the fish\n\n\"habitat\" = String of 3 numbers:\n           (-1 0 0: Freshwater fish)\n           ( 0 -1 0: Brackish fish)\n           (0 0 -1: Saltwater fish)\n           (Can be a combination of those values to show it lives in more than one type of water)\n           ie: \"0 -1 -1\" (means both brackish and saltwater)\n\n\"endanger_status\" = endanger status given by IUCN, look below for more information\n\n\"population_trend\" = Unknown, Stable, Increasing, Decreasing\n\n\"average_size\" = average size of the fish in meters\n\n\"picture_url\" = url to the picture of the fish\n\n\"description\": = short description of the fish,\n\n\"speccode\": = code to identify the fish (used for backend purpose)\n\n\"catch_year\" = year the catch rate data was recorded\n\n\"catch_rate\" = catch rate of fish (total landings) \n\n\"location\" = array of location ids that are related to this fish\n\n\"human_impact_ids\" = dictionary of arrays of ids that are related to fish.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5e87e019-cb1c-4da9-b834-f8f560144238",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "504f153b-ff78-4fee-9941-af6e8e4d3cc6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.any.keys('total_fish_returned', 'data');",
							"});",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bodies of Water",
			"item": [
				{
					"name": "Get all Bodies of Water",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea0a7515-d556-433b-a32f-8dacd0d812a7",
								"exec": [
									"pm.test(\"Check Data Values in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Paiko Lagoon')\r",
									"    pm.expect(data.type).to.eql('Lagoon')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(2);\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?limit=2&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "Total number of water entries to return"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Index to start the search from"
								}
							]
						},
						"description": "Return all the instances of bodies of water we have avaliable."
					},
					"response": [
						{
							"name": "Get all Bodies of Water",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?limit=2&offset=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Total number of water entries to return"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Index to start the search from"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:12:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1045"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 315,\n    \"total_water_returned\": 2,\n    \"data\": [\n        {\n            \"id\": 5,\n            \"name\": \"Paiko Lagoon\",\n            \"type\": \"Lagoon\",\n            \"latitude\": 21.28611,\n            \"longitude\": -157.72778,\n            \"min_latitude\": 21.28146,\n            \"min_longitude\": -157.72798,\n            \"max_latitude\": 21.28486,\n            \"max_longitude\": -157.72196,\n            \"water_temp\": 26,\n            \"wind_speedkmph\": 18,\n            \"size\": 36.30590796279737,\n            \"model\": \"bodies_of_water\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"Sharks cove\",\n            \"type\": \"Bay\",\n            \"latitude\": 21.65472,\n            \"longitude\": -158.065,\n            \"min_latitude\": 21.65046,\n            \"min_longitude\": -158.06192,\n            \"max_latitude\": 21.65256,\n            \"max_longitude\": -158.06329,\n            \"water_temp\": 25.5,\n            \"wind_speedkmph\": 15,\n            \"size\": 15.707569167728147,\n            \"model\": \"bodies_of_water\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee3d0d2c-d654-4c7d-9e6d-019928b4eba9",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data;\r",
									"    pm.expect(data.name).to.eql('Biscayne Bay')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'fish', 'human_impact_ids', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"type": "string",
									"description": "Id entry of the water (integer)"
								}
							]
						},
						"description": "Return a body of water with the given id"
					},
					"response": [
						{
							"name": "Get Body of Water by Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string",
											"description": "Id entry of the water (integer)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:12:33 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "5214"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"Biscayne Bay\",\n        \"type\": \"Bay\",\n        \"latitude\": 25.55,\n        \"longitude\": -80.2167,\n        \"min_latitude\": 25.38,\n        \"min_longitude\": -80.36,\n        \"max_latitude\": 25.77,\n        \"max_longitude\": -80.11,\n        \"water_temp\": 29,\n        \"wind_speedkmph\": 21,\n        \"size\": 2863.49360457247,\n        \"model\": \"bodies_of_water\",\n        \"fish\": [\n            1,\n            5,\n            8,\n            12,\n            13,\n            17,\n            20,\n            23,\n            26,\n            45,\n            51,\n            54,\n            57,\n            60,\n            61,\n            69,\n            72,\n            73,\n            78,\n            98,\n            99,\n            102,\n            113,\n            114,\n            115,\n            120,\n            124,\n            135,\n            136,\n            137,\n            139,\n            148,\n            151,\n            152,\n            154,\n            156,\n            157,\n            158,\n            159,\n            170,\n            171,\n            172,\n            175,\n            181,\n            207,\n            208,\n            212,\n            215,\n            223,\n            238,\n            240,\n            248,\n            250,\n            259,\n            260,\n            266,\n            284,\n            285,\n            291,\n            293,\n            294,\n            299,\n            314,\n            325,\n            329,\n            332,\n            343,\n            344,\n            346,\n            350,\n            377,\n            380,\n            384,\n            387,\n            389,\n            400,\n            407,\n            409,\n            411,\n            412,\n            419,\n            424,\n            445,\n            449,\n            450,\n            452,\n            461,\n            468,\n            485,\n            495,\n            508,\n            512,\n            514,\n            523,\n            524,\n            527,\n            531,\n            532,\n            548,\n            550,\n            556,\n            560,\n            561,\n            587,\n            588,\n            593,\n            595,\n            598,\n            606,\n            607,\n            625,\n            628,\n            629,\n            630,\n            631,\n            632,\n            641,\n            644,\n            667,\n            670,\n            671,\n            695,\n            696,\n            700,\n            701,\n            702,\n            703,\n            705,\n            718,\n            719,\n            723,\n            724,\n            726,\n            728,\n            733,\n            734,\n            735,\n            736,\n            743,\n            745,\n            746,\n            753,\n            755,\n            756,\n            771,\n            772,\n            773,\n            776,\n            780,\n            787,\n            793,\n            802,\n            813,\n            815,\n            816,\n            826,\n            831,\n            837,\n            843,\n            846,\n            849,\n            861,\n            869,\n            870,\n            873,\n            876,\n            880,\n            881,\n            885,\n            888,\n            890,\n            899,\n            902,\n            904,\n            905,\n            906,\n            907,\n            915,\n            916,\n            918,\n            919,\n            922,\n            923,\n            938,\n            943,\n            956,\n            957,\n            962,\n            963,\n            964,\n            967,\n            968,\n            970,\n            971,\n            973,\n            976,\n            977,\n            982,\n            987,\n            988,\n            991,\n            995,\n            996,\n            997,\n            998,\n            999,\n            1000,\n            1001,\n            1004,\n            1005,\n            1008,\n            1017,\n            1026,\n            1027,\n            1028,\n            1029,\n            1030,\n            1034,\n            1036,\n            1039,\n            1048,\n            1050,\n            1053,\n            1063,\n            1064,\n            1065,\n            1066,\n            1087,\n            1088,\n            1089,\n            1092,\n            1123,\n            1132,\n            1137,\n            1138,\n            1140,\n            1142,\n            1143,\n            1148,\n            1151,\n            1157,\n            1159,\n            1163,\n            1170,\n            1176,\n            1178,\n            1180,\n            1181,\n            1183,\n            1191,\n            1192,\n            1195,\n            1200,\n            1218,\n            1221,\n            1222,\n            1224,\n            1227,\n            1231,\n            1232,\n            1244,\n            1248,\n            1255,\n            1256,\n            1258,\n            1259,\n            1261,\n            1269,\n            1270,\n            1277,\n            1284,\n            1290,\n            1302\n        ],\n        \"human_impact_ids\": [\n            195,\n            215,\n            238\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7139c77-31f2-4724-9880-6955d53f8498",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Sharks cove')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?type=Bay&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "type",
									"value": "Bay",
									"description": "Type of body of water (String)"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Total number of water entries to return"
								}
							]
						},
						"description": "Returns all bodies of water of a given type (ocean, sea, ect)"
					},
					"response": [
						{
							"name": "Get Body of Water by Type",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?type=Bay&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "type",
											"value": "Bay",
											"description": "Type of body of water (String)"
										},
										{
											"key": "limit",
											"value": "1",
											"description": "Total number of water entries to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:12:51 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "562"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 315,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 6,\n            \"name\": \"Sharks cove\",\n            \"type\": \"Bay\",\n            \"latitude\": 21.65472,\n            \"longitude\": -158.065,\n            \"min_latitude\": 21.65046,\n            \"min_longitude\": -158.06192,\n            \"max_latitude\": 21.65256,\n            \"max_longitude\": -158.06329,\n            \"water_temp\": 25.5,\n            \"wind_speedkmph\": 15,\n            \"size\": 15.707569167728147,\n            \"model\": \"bodies_of_water\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fceea63-1ac1-4e23-86b0-5f4f6a0dbe36",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Biscayne Bay')\r",
									"    pm.expect(data.type).to.eql('Bay')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?name=Biscayne Bay",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "name",
									"value": "Biscayne Bay",
									"description": "Name of body of water (String)"
								}
							]
						},
						"description": "Returns the body of water with the given name"
					},
					"response": [
						{
							"name": "Get Body of Water by Name",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?name=Biscayne Bay",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "name",
											"value": "Biscayne Bay",
											"description": "Name of body of water (String)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:13:36 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "544"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 315,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"Biscayne Bay\",\n            \"type\": \"Bay\",\n            \"latitude\": 25.55,\n            \"longitude\": -80.2167,\n            \"min_latitude\": 25.38,\n            \"min_longitude\": -80.36,\n            \"max_latitude\": 25.77,\n            \"max_longitude\": -80.11,\n            \"water_temp\": 29,\n            \"wind_speedkmph\": 21,\n            \"size\": 2863.49360457247,\n            \"model\": \"bodies_of_water\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Latitude and Longitude Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a56c61b-4d91-4301-a9f5-075ab68ec93b",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Laguna Madre')\r",
									"    pm.expect(data.type).to.eql('Lake')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?lat_min=26&lat_max=27&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "lat_min",
									"value": "26"
								},
								{
									"key": "lat_max",
									"value": "27"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Total number of water entries to return"
								}
							]
						},
						"description": "Return the body of water by the range of latitude. (USED long_min and long_max for logitude)"
					},
					"response": [
						{
							"name": "Get Body of Water by Latitude and Longitude Range",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?lat_min=26&lat_max=27&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "lat_min",
											"value": "26"
										},
										{
											"key": "lat_max",
											"value": "27"
										},
										{
											"key": "limit",
											"value": "1",
											"description": "Total number of water entries to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:41:34 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "549"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 315,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 29,\n            \"name\": \"Laguna Madre\",\n            \"type\": \"Lake\",\n            \"latitude\": 26.797,\n            \"longitude\": -97.45943,\n            \"min_latitude\": 26.03,\n            \"min_longitude\": -97.1,\n            \"max_latitude\": 26.91,\n            \"max_longitude\": -97.67,\n            \"water_temp\": 29.5,\n            \"wind_speedkmph\": 24,\n            \"size\": 5437.5007298161045,\n            \"model\": \"bodies_of_water\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Size",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e12d233-08c0-4581-83bd-2b0302e454c3",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Paiko Lagoon')\r",
									"    pm.expect(data.type).to.eql('Lagoon')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?size_min=0&size_max=100&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "size_min",
									"value": "0",
									"description": "(float) Minimum surface area, in sqkm"
								},
								{
									"key": "size_max",
									"value": "100",
									"description": "(float) Maximum surface area, in sqkm"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Get water with a given size range, in sqkm"
					},
					"response": [
						{
							"name": "Get Body of Water by Size",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?size_min=0&size_max=100&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "size_min",
											"value": "0",
											"description": "(float) Minimum surface area, in sqkm"
										},
										{
											"key": "size_max",
											"value": "100",
											"description": "(float) Maximum surface area, in sqkm"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:41:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "567"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 315,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 5,\n            \"name\": \"Paiko Lagoon\",\n            \"type\": \"Lagoon\",\n            \"latitude\": 21.28611,\n            \"longitude\": -157.72778,\n            \"min_latitude\": 21.28146,\n            \"min_longitude\": -157.72798,\n            \"max_latitude\": 21.28486,\n            \"max_longitude\": -157.72196,\n            \"water_temp\": 26,\n            \"wind_speedkmph\": 18,\n            \"size\": 36.30590796279737,\n            \"model\": \"bodies_of_water\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Body of Water by Temperature",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95671ac2-5629-4289-9779-3ba08fd6194c",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Paiko Lagoon')\r",
									"    pm.expect(data.type).to.eql('Lagoon')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?temp_min=0&temp_max=100&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "temp_min",
									"value": "0",
									"description": "(float) Minimum water temperature, in C"
								},
								{
									"key": "temp_max",
									"value": "100",
									"description": "(float) Maximum water temperature, in C"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Get bodies of water in a given temperature range, in degrees C"
					},
					"response": [
						{
							"name": "Get Body of Water by Temperature",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?temp_min=0&temp_max=100&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "temp_min",
											"value": "0",
											"description": "(float) Minimum water temperature, in C"
										},
										{
											"key": "temp_max",
											"value": "100",
											"description": "(float) Maximum water temperature, in C"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:42:11 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "567"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 315,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 5,\n            \"name\": \"Paiko Lagoon\",\n            \"type\": \"Lagoon\",\n            \"latitude\": 21.28611,\n            \"longitude\": -157.72778,\n            \"min_latitude\": 21.28146,\n            \"min_longitude\": -157.72798,\n            \"max_latitude\": 21.28486,\n            \"max_longitude\": -157.72196,\n            \"water_temp\": 26,\n            \"wind_speedkmph\": 18,\n            \"size\": 36.30590796279737,\n            \"model\": \"bodies_of_water\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Bodies of Water with Sort and Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d2009bd-b70d-4133-8295-fe45479dae53",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    pm.expect(data.name).to.eql('Cow Ledge Shoal')\r",
									"    pm.expect(data.type).to.eql('Shoal')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_water_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'name', 'type', 'latitude', 'longitude', 'min_latitude', 'min_longitude', 'max_latitude', 'max_longitude', 'water_temp', 'wind_speedkmph', 'size', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/water?sort=name&size_min=5&size_max=7",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"water"
							],
							"query": [
								{
									"key": "sort",
									"value": "name",
									"description": "The attribute to be sorted by"
								},
								{
									"key": "size_min",
									"value": "5",
									"description": "Minimum size to be returned (for filtering)"
								},
								{
									"key": "size_max",
									"value": "7",
									"description": "Maximum size to be returned (for filtering)"
								}
							]
						},
						"description": "<h6> For water we can sort by </h6>\n<ul>\n    <li>name</li>\n    <li>long</li>\n    <li>lat</li>\n    <li>water_temp</li>\n    <li>size</i>\n</ul>\nAll the ones with numeric ranges you need to specify both a maximum and maximum for the api call. The names of the min and max are listed below.\n<h6>For water we can filter by</h6>\n<ul>\n    <li>type</li>\n    <li>long (long_min and long_max)</li>\n    <li>lat (lat_min and lat_max)</li>\n    <li>water_temp (temp_min and temp_max)</li>\n    <li>size (size_min and size_max)</li>\n</ul>"
					},
					"response": [
						{
							"name": "Get Bodies of Water with Sort and Filter",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/water?sort=name&size_min=5&size_max=7",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"water"
									],
									"query": [
										{
											"key": "sort",
											"value": "name",
											"description": "The attribute to be sorted by"
										},
										{
											"key": "size_min",
											"value": "5",
											"description": "Minimum size to be returned (for filtering)"
										},
										{
											"key": "size_max",
											"value": "7",
											"description": "Maximum size to be returned (for filtering)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:42:20 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "572"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_water_count\": 315,\n    \"total_water_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 256,\n            \"name\": \"Cow Ledge Shoal\",\n            \"type\": \"Shoal\",\n            \"latitude\": 44.2843357,\n            \"longitude\": -66.3351775,\n            \"min_latitude\": 44.28397,\n            \"min_longitude\": -66.33554,\n            \"max_latitude\": 44.28471,\n            \"max_longitude\": -66.33482,\n            \"water_temp\": null,\n            \"wind_speedkmph\": null,\n            \"size\": 6.434795831228201,\n            \"model\": \"bodies_of_water\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Water related queries/request\r\n\r\n**Description of Return Types**\r\n\r\n\"total_water_count\" = Total number of bodies of water in the database\r\n\r\n\"total_water_returned\" = Total number of bodies of water returned in this query\r\n\r\n\"data\" = Block for the list of water entries\r\n\r\n\"id\" = Id entry in the database\r\n\r\n\"name\" = Name of the body of water\r\n\r\n\"type\" = Type of body of water returned\r\n\r\n\"latitude\" = Rough latitude value of the body of water\r\n\r\n\"longitude\" = Rough longitude value of the body of water\r\n\r\n\"min_latitude\" = Rough latitude value of the body of water, offset to -latitude\r\n\r\n\"min_longitude\" = Rough longitude value of the body of water, offset to -longitude\r\n\r\n\"max_latitude\" = Rough latitude value of the body of water, offset to +latitude\r\n\r\n\"max_longitude\" = Rough longitude value of the body of water, offset to +longitude\r\n\r\n\"water_temp\" = Water temperature of the body of water\r\n\r\n\"windspeedkmph\" = Current wind speed of the water in KMPH, if applicable\r\n\r\n\"size\" = Surface area of the body of water, in mi^2\r\n\r\n\"fish\" = List of Id's of fish found in the body of water\r\n\r\n\"human_impact_ids\" = List of Id's of human impact that affects this body of water\r\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9ec57629-89dc-4095-a81a-b0d033a0fa27",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf08b18b-90ad-403a-9cfd-3596a53fbbe7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.any.keys('total_water_count', 'data');",
							"});",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Human Impact",
			"item": [
				{
					"name": "Get all Human Impacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7830329f-f183-4687-a0ad-14014036f5b6",
								"exec": [
									"pm.test(\"Check Keys in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'model')\r",
									"});\r",
									"\r",
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish', 'model'];\r",
									"    pm.expect(data.name).to.eql('Odyssey')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?limit=2&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"description": "Maximum number of entries to return"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Index to start querying at"
								}
							]
						},
						"description": "Returns all the human impact instances we have avaliable."
					},
					"response": [
						{
							"name": "Get all Human Impacts",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?limit=2&offset=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "Maximum number of entries to return"
										},
										{
											"key": "offset",
											"value": "0",
											"description": "Index to start querying at"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:44:42 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "2838"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 241,\n    \"total_impact_returned\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 42.8115,\n            \"longitude\": -61.8288,\n            \"date\": \"10/11/1998\",\n            \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n            \"name\": \"Odyssey\",\n            \"oil_amount\": 132000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"model\": \"human_impact\"\n        },\n        {\n            \"id\": 2,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 20.2389,\n            \"longitude\": -163.2688,\n            \"date\": \"23/02/1977\",\n            \"description\": \"On 23th February 1977, HAWAIIAN PATRIOT fully loaded with 99,000 tonnes of  light Indonesian crude oil, en route from Indonesia to Honolulu, reported a crack in her hull plating during a storm which resulted in a leak of oil from the cargo holds approximately 300 miles west of Hawaii. Approximately 18,000 tonnes of oil had leaked into the sea and on the following day the tanker caught fire and exploded. It burnt fiercely for several hours and sank with the remaining cargo on board. One crew member died as a result. The resultant oil slick, which was estimated to contain about 50,000 tonnes of oil was carried westward away from Hawaii by ocean currents and did not result in pollution problems on land. The slick was kept under surveillance.  No response to the oil spill took place as the oil dissipated naturally.\",\n            \"name\": \"Hawaiian Patriot\",\n            \"oil_amount\": 95000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"model\": \"human_impact\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3d60fe8-dc9a-4cad-86b6-086fddc8d703",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data;\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish', 'model'];\r",
									"    pm.expect(data.name).to.eql('Odyssey')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"\r",
									"pm.test(\"Check Keys in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source','location', 'fish', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"type": "string",
									"description": "id of human impact to return"
								}
							]
						},
						"description": "Return the human impact specified by the id path parameter."
					},
					"response": [
						{
							"name": "Get Human Impact By Id",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human/:id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"type": "string",
											"description": "id of human impact to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:48:18 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "24548"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 1,\n        \"category\": \"pollution\",\n        \"subcategory\": \"tanker_oil_spills\",\n        \"latitude\": 42.8115,\n        \"longitude\": -61.8288,\n        \"date\": \"10/11/1998\",\n        \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n        \"name\": \"Odyssey\",\n        \"oil_amount\": 132000,\n        \"count_density_1\": null,\n        \"count_density_2\": null,\n        \"count_density_3\": null,\n        \"count_density_4\": null,\n        \"plant_rating\": null,\n        \"plant_location\": null,\n        \"plant_water_source\": null,\n        \"model\": \"human_impact\",\n        \"location\": [\n            {\n                \"id\": 51,\n                \"name\": \"Little Lurcher\"\n            },\n            {\n                \"id\": 52,\n                \"name\": \"Lurcher Shoal\"\n            },\n            {\n                \"id\": 63,\n                \"name\": \"McDormand Patch\"\n            },\n            {\n                \"id\": 73,\n                \"name\": \"Mitchell Bay\"\n            },\n            {\n                \"id\": 74,\n                \"name\": \"Little Hawbolt Shoal\"\n            },\n            {\n                \"id\": 75,\n                \"name\": \"Lang Shoal\"\n            },\n            {\n                \"id\": 76,\n                \"name\": \"Hardwood Island Shoal\"\n            },\n            {\n                \"id\": 77,\n                \"name\": \"Mackerel Shoal\"\n            },\n            {\n                \"id\": 78,\n                \"name\": \"Middle Ground\"\n            },\n            {\n                \"id\": 79,\n                \"name\": \"Lumpfish Shoal\"\n            },\n            {\n                \"id\": 80,\n                \"name\": \"Middle Shoal\"\n            },\n            {\n                \"id\": 81,\n                \"name\": \"Kitts Reef\"\n            },\n            {\n                \"id\": 82,\n                \"name\": \"Turners Shoal\"\n            },\n            {\n                \"id\": 83,\n                \"name\": \"Pollock Shoal\"\n            },\n            {\n                \"id\": 84,\n                \"name\": \"Pan Shoal\"\n            },\n            {\n                \"id\": 85,\n                \"name\": \"The Frenchman\"\n            },\n            {\n                \"id\": 86,\n                \"name\": \"Sammys Shoal\"\n            },\n            {\n                \"id\": 87,\n                \"name\": \"Hatch Cove Shoal\"\n            },\n            {\n                \"id\": 88,\n                \"name\": \"Calf Island Shoal\"\n            },\n            {\n                \"id\": 89,\n                \"name\": \"Thrumcap Shoal\"\n            },\n            {\n                \"id\": 90,\n                \"name\": \"MacKinley Shoal\"\n            },\n            {\n                \"id\": 91,\n                \"name\": \"Sand Shoal\"\n            },\n            {\n                \"id\": 92,\n                \"name\": \"Liscomb Shoal\"\n            },\n            {\n                \"id\": 93,\n                \"name\": \"Georges Mark\"\n            },\n            {\n                \"id\": 94,\n                \"name\": \"Wedge Shoal\"\n            },\n            {\n                \"id\": 95,\n                \"name\": \"Fleck Shoal\"\n            },\n            {\n                \"id\": 96,\n                \"name\": \"Nixons Mate Shoal\"\n            },\n            {\n                \"id\": 97,\n                \"name\": \"The Reef\"\n            },\n            {\n                \"id\": 98,\n                \"name\": \"Pride Shoal\"\n            },\n            {\n                \"id\": 99,\n                \"name\": \"Lawsons Shoal\"\n            },\n            {\n                \"id\": 100,\n                \"name\": \"George Pyes Shoal\"\n            },\n            {\n                \"id\": 101,\n                \"name\": \"Big Hawbolt Shoal\"\n            },\n            {\n                \"id\": 102,\n                \"name\": \"Peter Shoal\"\n            },\n            {\n                \"id\": 103,\n                \"name\": \"Flat Shoal\"\n            },\n            {\n                \"id\": 104,\n                \"name\": \"Lower Bay Shoal\"\n            },\n            {\n                \"id\": 105,\n                \"name\": \"Upper Bay Shoal\"\n            },\n            {\n                \"id\": 106,\n                \"name\": \"Stone Horse\"\n            },\n            {\n                \"id\": 107,\n                \"name\": \"Steves Shoal\"\n            },\n            {\n                \"id\": 108,\n                \"name\": \"White Knoll Ledge\"\n            },\n            {\n                \"id\": 109,\n                \"name\": \"Toots Shoal\"\n            },\n            {\n                \"id\": 110,\n                \"name\": \"The Hay Cock\"\n            },\n            {\n                \"id\": 111,\n                \"name\": \"East Bear Point Ledge\"\n            },\n            {\n                \"id\": 112,\n                \"name\": \"Houses Ground\"\n            },\n            {\n                \"id\": 113,\n                \"name\": \"Little Horse Race\"\n            },\n            {\n                \"id\": 114,\n                \"name\": \"Long Reef\"\n            },\n            {\n                \"id\": 115,\n                \"name\": \"Cross Ledge\"\n            },\n            {\n                \"id\": 116,\n                \"name\": \"Murray Shoal\"\n            },\n            {\n                \"id\": 117,\n                \"name\": \"Cunningham Reef\"\n            },\n            {\n                \"id\": 118,\n                \"name\": \"Huskins Reef\"\n            },\n            {\n                \"id\": 119,\n                \"name\": \"Liverpool Ledge\"\n            },\n            {\n                \"id\": 120,\n                \"name\": \"South Angle Ledge\"\n            },\n            {\n                \"id\": 121,\n                \"name\": \"Southwest Ledge\"\n            },\n            {\n                \"id\": 122,\n                \"name\": \"Horse Race\"\n            },\n            {\n                \"id\": 123,\n                \"name\": \"Cape Ledge\"\n            },\n            {\n                \"id\": 124,\n                \"name\": \"Inner Shoal\"\n            },\n            {\n                \"id\": 125,\n                \"name\": \"Hero Shoal\"\n            },\n            {\n                \"id\": 126,\n                \"name\": \"Congress Shoal\"\n            },\n            {\n                \"id\": 127,\n                \"name\": \"Mid Ledge\"\n            },\n            {\n                \"id\": 128,\n                \"name\": \"Doddys Shoal\"\n            },\n            {\n                \"id\": 129,\n                \"name\": \"Cooks Ledge\"\n            },\n            {\n                \"id\": 130,\n                \"name\": \"Daniel Shoal\"\n            },\n            {\n                \"id\": 131,\n                \"name\": \"Stoney Island Shoal\"\n            },\n            {\n                \"id\": 132,\n                \"name\": \"Lovetts Shoal\"\n            },\n            {\n                \"id\": 133,\n                \"name\": \"Newellton Reef\"\n            },\n            {\n                \"id\": 134,\n                \"name\": \"Soldiers Ledge\"\n            },\n            {\n                \"id\": 135,\n                \"name\": \"Adamant Shoal\"\n            },\n            {\n                \"id\": 137,\n                \"name\": \"St. Margarets Bay\"\n            },\n            {\n                \"id\": 138,\n                \"name\": \"Big Fish Shoal\"\n            },\n            {\n                \"id\": 139,\n                \"name\": \"Middle Patch\"\n            },\n            {\n                \"id\": 140,\n                \"name\": \"Backmans Shoal\"\n            },\n            {\n                \"id\": 141,\n                \"name\": \"Sand Cove Head Shoal\"\n            },\n            {\n                \"id\": 142,\n                \"name\": \"Spectacle Shoal\"\n            },\n            {\n                \"id\": 143,\n                \"name\": \"Northeast Coachman\"\n            },\n            {\n                \"id\": 144,\n                \"name\": \"Sand Cove Shoal\"\n            },\n            {\n                \"id\": 145,\n                \"name\": \"Northeast Shoal\"\n            },\n            {\n                \"id\": 146,\n                \"name\": \"Nose Shoal\"\n            },\n            {\n                \"id\": 147,\n                \"name\": \"Dogfish Ground\"\n            },\n            {\n                \"id\": 148,\n                \"name\": \"Gull Shoal\"\n            },\n            {\n                \"id\": 149,\n                \"name\": \"Southeast Shoal\"\n            },\n            {\n                \"id\": 150,\n                \"name\": \"Spectacle Shoals\"\n            },\n            {\n                \"id\": 151,\n                \"name\": \"Jack Langilles Shoal\"\n            },\n            {\n                \"id\": 152,\n                \"name\": \"Bella Shoal\"\n            },\n            {\n                \"id\": 153,\n                \"name\": \"Young Ledge\"\n            },\n            {\n                \"id\": 154,\n                \"name\": \"Graves Shoal\"\n            },\n            {\n                \"id\": 155,\n                \"name\": \"Frog Island Shoal\"\n            },\n            {\n                \"id\": 156,\n                \"name\": \"Middle Shoals\"\n            },\n            {\n                \"id\": 157,\n                \"name\": \"Sculpin Shoal\"\n            },\n            {\n                \"id\": 158,\n                \"name\": \"Lynch Shoal\"\n            },\n            {\n                \"id\": 159,\n                \"name\": \"Western Lobster Claw\"\n            },\n            {\n                \"id\": 160,\n                \"name\": \"Southeast Shoals\"\n            },\n            {\n                \"id\": 161,\n                \"name\": \"Haddock Shoal\"\n            },\n            {\n                \"id\": 162,\n                \"name\": \"South Shoal\"\n            },\n            {\n                \"id\": 163,\n                \"name\": \"Hutt Shoal\"\n            },\n            {\n                \"id\": 164,\n                \"name\": \"West Shoals\"\n            },\n            {\n                \"id\": 165,\n                \"name\": \"Blandford Shoal\"\n            },\n            {\n                \"id\": 166,\n                \"name\": \"Five Finger Shoal\"\n            },\n            {\n                \"id\": 167,\n                \"name\": \"The Grampus\"\n            },\n            {\n                \"id\": 168,\n                \"name\": \"Meisners Shoal\"\n            },\n            {\n                \"id\": 169,\n                \"name\": \"Shad Bay Breakers\"\n            },\n            {\n                \"id\": 170,\n                \"name\": \"Kitiwiti Shoal\"\n            },\n            {\n                \"id\": 171,\n                \"name\": \"Birch Shoal\"\n            },\n            {\n                \"id\": 172,\n                \"name\": \"Round Shoal\"\n            },\n            {\n                \"id\": 173,\n                \"name\": \"Slaunwhites Shoal\"\n            },\n            {\n                \"id\": 174,\n                \"name\": \"Quaker Shoal\"\n            },\n            {\n                \"id\": 175,\n                \"name\": \"Green Shoal\"\n            },\n            {\n                \"id\": 176,\n                \"name\": \"Bedford Basin\"\n            },\n            {\n                \"id\": 177,\n                \"name\": \"Bigfish Shoal\"\n            },\n            {\n                \"id\": 178,\n                \"name\": \"Colt Shoal\"\n            },\n            {\n                \"id\": 179,\n                \"name\": \"Pleasant Shoal\"\n            },\n            {\n                \"id\": 180,\n                \"name\": \"Duncan Reef\"\n            },\n            {\n                \"id\": 181,\n                \"name\": \"Cronie Reef\"\n            },\n            {\n                \"id\": 182,\n                \"name\": \"Connor Reef\"\n            },\n            {\n                \"id\": 183,\n                \"name\": \"Portuguese Shoal\"\n            },\n            {\n                \"id\": 184,\n                \"name\": \"Head Rock Shoal\"\n            },\n            {\n                \"id\": 185,\n                \"name\": \"Neverfail Shoal\"\n            },\n            {\n                \"id\": 186,\n                \"name\": \"East Shoal\"\n            },\n            {\n                \"id\": 187,\n                \"name\": \"Nick Shoal\"\n            },\n            {\n                \"id\": 188,\n                \"name\": \"Little Pollock\"\n            },\n            {\n                \"id\": 189,\n                \"name\": \"Tribune Shoal\"\n            },\n            {\n                \"id\": 190,\n                \"name\": \"Shoal Ground\"\n            },\n            {\n                \"id\": 191,\n                \"name\": \"Horse Shoal\"\n            },\n            {\n                \"id\": 192,\n                \"name\": \"Mare Shoal\"\n            },\n            {\n                \"id\": 193,\n                \"name\": \"Warrens Shoal\"\n            },\n            {\n                \"id\": 194,\n                \"name\": \"Hume Shoal\"\n            },\n            {\n                \"id\": 195,\n                \"name\": \"Rous Shoal\"\n            },\n            {\n                \"id\": 201,\n                \"name\": \"Moores Ledge\"\n            },\n            {\n                \"id\": 214,\n                \"name\": \"Gordon Ground\"\n            },\n            {\n                \"id\": 215,\n                \"name\": \"Blow Breaker\"\n            },\n            {\n                \"id\": 216,\n                \"name\": \"Southeast Reef\"\n            },\n            {\n                \"id\": 217,\n                \"name\": \"South Ledge\"\n            },\n            {\n                \"id\": 218,\n                \"name\": \"Tickeys Shoal\"\n            },\n            {\n                \"id\": 219,\n                \"name\": \"Farm Ledge\"\n            },\n            {\n                \"id\": 50,\n                \"name\": \"Clarks Ground\"\n            },\n            {\n                \"id\": 200,\n                \"name\": \"Sugar Bowl\"\n            },\n            {\n                \"id\": 203,\n                \"name\": \"Outer Kent Shoal\"\n            },\n            {\n                \"id\": 204,\n                \"name\": \"Kent Shoal\"\n            },\n            {\n                \"id\": 206,\n                \"name\": \"Green Islands Shoal\"\n            },\n            {\n                \"id\": 207,\n                \"name\": \"Rans Shoal\"\n            },\n            {\n                \"id\": 222,\n                \"name\": \"Bantam Shoal\"\n            },\n            {\n                \"id\": 223,\n                \"name\": \"Cockawee Shoal\"\n            },\n            {\n                \"id\": 225,\n                \"name\": \"Andrews Shoal\"\n            },\n            {\n                \"id\": 226,\n                \"name\": \"Trappeans Shoal\"\n            },\n            {\n                \"id\": 229,\n                \"name\": \"The Flat\"\n            },\n            {\n                \"id\": 230,\n                \"name\": \"Betts Ground\"\n            },\n            {\n                \"id\": 232,\n                \"name\": \"Waugh Shoal\"\n            },\n            {\n                \"id\": 233,\n                \"name\": \"Bell Point Reef\"\n            },\n            {\n                \"id\": 234,\n                \"name\": \"Brule Shoals\"\n            },\n            {\n                \"id\": 236,\n                \"name\": \"Eastern Peak\"\n            },\n            {\n                \"id\": 238,\n                \"name\": \"Chebogue Ledge\"\n            },\n            {\n                \"id\": 240,\n                \"name\": \"Foul Ground\"\n            },\n            {\n                \"id\": 202,\n                \"name\": \"Proprietor Shoal\"\n            },\n            {\n                \"id\": 205,\n                \"name\": \"Sheep Island Shoal\"\n            },\n            {\n                \"id\": 224,\n                \"name\": \"Stoney Ridge\"\n            },\n            {\n                \"id\": 231,\n                \"name\": \"Rifleman Reef\"\n            },\n            {\n                \"id\": 235,\n                \"name\": \"Johnsons Shoal\"\n            },\n            {\n                \"id\": 239,\n                \"name\": \"Chebogue Point Shoal\"\n            },\n            {\n                \"id\": 241,\n                \"name\": \"Passage Ground\"\n            },\n            {\n                \"id\": 242,\n                \"name\": \"John Nix Shoal\"\n            },\n            {\n                \"id\": 243,\n                \"name\": \"Wraytons Shoal\"\n            },\n            {\n                \"id\": 244,\n                \"name\": \"Zetland Shoal\"\n            },\n            {\n                \"id\": 245,\n                \"name\": \"The Elbow\"\n            },\n            {\n                \"id\": 249,\n                \"name\": \"Shut-in Shoals\"\n            },\n            {\n                \"id\": 256,\n                \"name\": \"Cow Ledge Shoal\"\n            },\n            {\n                \"id\": 257,\n                \"name\": \"Frenchmans Elbow\"\n            },\n            {\n                \"id\": 258,\n                \"name\": \"Davies Head Shoal\"\n            },\n            {\n                \"id\": 259,\n                \"name\": \"Black Rock Shoal\"\n            },\n            {\n                \"id\": 260,\n                \"name\": \"Three Fathom Shoal\"\n            },\n            {\n                \"id\": 261,\n                \"name\": \"Ciboux Shoals\"\n            },\n            {\n                \"id\": 262,\n                \"name\": \"Gillams Rock\"\n            },\n            {\n                \"id\": 263,\n                \"name\": \"White Point Shoal\"\n            },\n            {\n                \"id\": 264,\n                \"name\": \"Devastation Shoal\"\n            },\n            {\n                \"id\": 265,\n                \"name\": \"Little Hope Shoal\"\n            },\n            {\n                \"id\": 266,\n                \"name\": \"Medway Ledge\"\n            },\n            {\n                \"id\": 267,\n                \"name\": \"Spectacle Ledge\"\n            },\n            {\n                \"id\": 270,\n                \"name\": \"Miramichi Bay\"\n            },\n            {\n                \"id\": 273,\n                \"name\": \"Clam Bay\"\n            },\n            {\n                \"id\": 274,\n                \"name\": \"Baltee Shoal\"\n            },\n            {\n                \"id\": 275,\n                \"name\": \"Little Hurley Shoal\"\n            },\n            {\n                \"id\": 276,\n                \"name\": \"Codray Shoal\"\n            },\n            {\n                \"id\": 277,\n                \"name\": \"Bear Shoal\"\n            },\n            {\n                \"id\": 278,\n                \"name\": \"Georges Spot\"\n            },\n            {\n                \"id\": 279,\n                \"name\": \"Outer Clearing Shoal\"\n            },\n            {\n                \"id\": 280,\n                \"name\": \"Sleepy Shoal\"\n            },\n            {\n                \"id\": 281,\n                \"name\": \"Big Hurley Shoal\"\n            },\n            {\n                \"id\": 282,\n                \"name\": \"Thorn Shoal\"\n            },\n            {\n                \"id\": 283,\n                \"name\": \"Henrys Shoal\"\n            },\n            {\n                \"id\": 284,\n                \"name\": \"Tomfool Shoals\"\n            },\n            {\n                \"id\": 285,\n                \"name\": \"Tangier Shoal\"\n            },\n            {\n                \"id\": 286,\n                \"name\": \"Inner Clearing Shoal\"\n            },\n            {\n                \"id\": 287,\n                \"name\": \"Net Shoal\"\n            },\n            {\n                \"id\": 288,\n                \"name\": \"Old Man Shoal\"\n            },\n            {\n                \"id\": 289,\n                \"name\": \"Borgles Shoal\"\n            },\n            {\n                \"id\": 290,\n                \"name\": \"Round Shoals\"\n            },\n            {\n                \"id\": 291,\n                \"name\": \"Spritsail Ledge\"\n            },\n            {\n                \"id\": 292,\n                \"name\": \"Western Shoal\"\n            },\n            {\n                \"id\": 293,\n                \"name\": \"The Lump\"\n            },\n            {\n                \"id\": 294,\n                \"name\": \"Faulkners Shoal\"\n            },\n            {\n                \"id\": 295,\n                \"name\": \"Redman Shoal\"\n            },\n            {\n                \"id\": 296,\n                \"name\": \"Petpeswick Shoal\"\n            },\n            {\n                \"id\": 297,\n                \"name\": \"Bull Shoal\"\n            },\n            {\n                \"id\": 298,\n                \"name\": \"Musquodoboit Shoal\"\n            },\n            {\n                \"id\": 299,\n                \"name\": \"Bald Island Shoal\"\n            },\n            {\n                \"id\": 300,\n                \"name\": \"William Shoal\"\n            },\n            {\n                \"id\": 301,\n                \"name\": \"Point Spot\"\n            },\n            {\n                \"id\": 302,\n                \"name\": \"Webbs Shoal\"\n            },\n            {\n                \"id\": 303,\n                \"name\": \"Jackie Shoal\"\n            },\n            {\n                \"id\": 304,\n                \"name\": \"East Pollock\"\n            },\n            {\n                \"id\": 305,\n                \"name\": \"Inner Pollock\"\n            },\n            {\n                \"id\": 306,\n                \"name\": \"Arnold Shoal\"\n            },\n            {\n                \"id\": 307,\n                \"name\": \"Phoenix Shoal\"\n            },\n            {\n                \"id\": 308,\n                \"name\": \"Maloney Shoal\"\n            },\n            {\n                \"id\": 309,\n                \"name\": \"Beaver Tail\"\n            },\n            {\n                \"id\": 310,\n                \"name\": \"Middle Grounds\"\n            },\n            {\n                \"id\": 311,\n                \"name\": \"Mushaboom Shoal\"\n            },\n            {\n                \"id\": 312,\n                \"name\": \"White Shoal\"\n            },\n            {\n                \"id\": 313,\n                \"name\": \"Sams Ground\"\n            }\n        ],\n        \"fish\": [\n            {\n                \"id\": 92,\n                \"scientific_name\": \"Amblyraja radiata\"\n            },\n            {\n                \"id\": 600,\n                \"scientific_name\": \"Clupea harengus\"\n            },\n            {\n                \"id\": 804,\n                \"scientific_name\": \"Enchelyopus cimbrius\"\n            },\n            {\n                \"id\": 959,\n                \"scientific_name\": \"Hippoglossus hippoglossus\"\n            },\n            {\n                \"id\": 174,\n                \"scientific_name\": \"Arctozenus risso\"\n            },\n            {\n                \"id\": 1286,\n                \"scientific_name\": \"Myxine glutinosa\"\n            },\n            {\n                \"id\": 1126,\n                \"scientific_name\": \"Liparis liparis\"\n            },\n            {\n                \"id\": 332,\n                \"scientific_name\": \"Callionymus bairdi\"\n            },\n            {\n                \"id\": 408,\n                \"scientific_name\": \"Centrolophus niger\"\n            },\n            {\n                \"id\": 986,\n                \"scientific_name\": \"Hyperoglyphe perciformis\"\n            },\n            {\n                \"id\": 1201,\n                \"scientific_name\": \"Melanogrammus aeglefinus\"\n            },\n            {\n                \"id\": 1219,\n                \"scientific_name\": \"Microgadus tomcod\"\n            },\n            {\n                \"id\": 456,\n                \"scientific_name\": \"Cetorhinus maximus\"\n            },\n            {\n                \"id\": 1127,\n                \"scientific_name\": \"Liparis montagui\"\n            },\n            {\n                \"id\": 364,\n                \"scientific_name\": \"Capros aper\"\n            },\n            {\n                \"id\": 1092,\n                \"scientific_name\": \"Lepophidium profundorum\"\n            },\n            {\n                \"id\": 1185,\n                \"scientific_name\": \"Malacoraja senta\"\n            },\n            {\n                \"id\": 1204,\n                \"scientific_name\": \"Melanostigma atlanticum\"\n            },\n            {\n                \"id\": 613,\n                \"scientific_name\": \"Coregonus huntsmani\"\n            },\n            {\n                \"id\": 645,\n                \"scientific_name\": \"Cottunculus thomsonii\"\n            },\n            {\n                \"id\": 677,\n                \"scientific_name\": \"Cyclothone microdon\"\n            },\n            {\n                \"id\": 1031,\n                \"scientific_name\": \"Kajikia albida\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Get Human Impact By Subcategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "774899d5-f0a2-460b-add0-90da19d0afe1",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish', 'model'];\r",
									"    pm.expect(data.name).to.eql('Odyssey')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Keys in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?subcategory=tanker_oil_spills&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "subcategory",
									"value": "tanker_oil_spills",
									"description": "The subcategory of human impact to return"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Maximum number of entries to return"
								}
							]
						},
						"description": "Retrieve all the instances that are associated with the type specified with the type path parameter. (Types include: pollution, powerplants, overfishing, ect...)"
					},
					"response": [
						{
							"name": "Get Human Impact By Subcategory",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?subcategory=tanker_oil_spills&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "subcategory",
											"value": "tanker_oil_spills",
											"description": "The subcategory of human impact to return"
										},
										{
											"key": "limit",
											"value": "1",
											"description": "Maximum number of entries to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:53:30 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1388"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 241,\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 42.8115,\n            \"longitude\": -61.8288,\n            \"date\": \"10/11/1998\",\n            \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n            \"name\": \"Odyssey\",\n            \"oil_amount\": 132000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"model\": \"human_impact\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact By Latitude and Longitude Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a8c395c-80ab-43ed-8d5a-8f5bc7148880",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'model'];\r",
									"    pm.expect(data.name).to.eql('Braer')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Keys in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?lat_min=43&lat_max=62&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "lat_min",
									"value": "43",
									"description": "minimum latitude in the range"
								},
								{
									"key": "lat_max",
									"value": "62",
									"description": "maximum latitude in the range"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Returns the human impacts that occur in the range of latitude. (USE long_min and long_max for logitude)."
					},
					"response": [
						{
							"name": "Get Human Impact By Latitude and Longitude",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?lat_min=43&lat_max=62&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "lat_min",
											"value": "43",
											"description": "minimum latitude in the range"
										},
										{
											"key": "lat_max",
											"value": "62",
											"description": "maximum latitude in the range"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:56:28 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "3018"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 241,\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 3,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 59.8049,\n            \"longitude\": -1.1411,\n            \"date\": \"05/01/1993\",\n            \"description\": \"Following engine failure, BRAER ran aground in severe weather conditions on Garth's Ness, Shetland on 5th January 1993. Over a period of 12 days the entire cargo of 84,700 tonnes of Norwegian Gullfaks crude oil, plus up to 1,500 tonnes of heavy bunker oil, were lost as almost constant storm force winds and heavy seas broke the ship apart. Weather conditions prevented the use of mechanical recovery equipment at sea, although about 130 tonnes of chemical dispersant was applied from aircraft during periods when the wind abated slightly and some oil remained on the surface. Oiling of shorelines was minimal relative to the size of the spill and cleanup involved the collection of oily debris and seaweed by a small workforce. The BRAER spill was very unusual in that a surface slick was not produced. A combination of the light nature of the oil and the exceptionally strong wind and wave energy naturally dispersed the oil throughout the water column. The oil droplets were adsorbed onto sediment particles which eventually sank to the sea bed. Sub-surface currents led to this oil being spread over a very wide area, although a significant portion eventually ended up in two deep, fine sediment 'sinks'. A wide range of fish and shellfish over a fairly large area became contaminated with oil, resulting in the imposition of a Fisheries Exclusion Zone. Farmed salmon held in sea cages in the surface waters within this zone bore the brunt of the contamination since they could not escape the cloud of dispersed oil. Although this contamination was lost quickly once clean water conditions returned, millions of salmon that could not be marketed had to be destroyed. The Exclusion Zone was progressively lifted as fish and shellfish species were found by chemical analysis and taste testing to be free of contamination, although it was still in place over 6 years after the spill for mussels and Norway lobsters at some sites within the closure area. The BRAER spill was unusual in that a significant amount of oil was blown on to land adjacent to the wreck site. The effects of this airborne oil were localised and had no more than a temporary impact on vegetation and livestock. Seabird casualties were also relatively low. Considering the size of the spill, the environmental impacts were surprisingly limited.\",\n            \"name\": \"Braer\",\n            \"oil_amount\": 85000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"model\": \"human_impact\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact by Oil Amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ac2ef06-4ec9-45f7-a84c-466fe4e236cb",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish', 'model'];\r",
									"    pm.expect(data.name).to.eql('Braer')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Keys in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?oil_amount_min=0&oil_amount_max=85000&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "oil_amount_min",
									"value": "0",
									"description": "Minimum amount of oil spilled, in metric tons"
								},
								{
									"key": "oil_amount_max",
									"value": "85000",
									"description": "Maximum amount of oil spilled, in metric tons"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Get human impact entries by oil amount, minimum and maximum"
					},
					"response": [
						{
							"name": "Get Human Impact by Oil Amount",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?oil_amount_min=0&oil_amount_max=85000&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "oil_amount_min",
											"value": "0",
											"description": "Minimum amount of oil spilled, in metric tons"
										},
										{
											"key": "oil_amount_max",
											"value": "85000",
											"description": "Maximum amount of oil spilled, in metric tons"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:56:43 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "3018"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 241,\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 3,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 59.8049,\n            \"longitude\": -1.1411,\n            \"date\": \"05/01/1993\",\n            \"description\": \"Following engine failure, BRAER ran aground in severe weather conditions on Garth's Ness, Shetland on 5th January 1993. Over a period of 12 days the entire cargo of 84,700 tonnes of Norwegian Gullfaks crude oil, plus up to 1,500 tonnes of heavy bunker oil, were lost as almost constant storm force winds and heavy seas broke the ship apart. Weather conditions prevented the use of mechanical recovery equipment at sea, although about 130 tonnes of chemical dispersant was applied from aircraft during periods when the wind abated slightly and some oil remained on the surface. Oiling of shorelines was minimal relative to the size of the spill and cleanup involved the collection of oily debris and seaweed by a small workforce. The BRAER spill was very unusual in that a surface slick was not produced. A combination of the light nature of the oil and the exceptionally strong wind and wave energy naturally dispersed the oil throughout the water column. The oil droplets were adsorbed onto sediment particles which eventually sank to the sea bed. Sub-surface currents led to this oil being spread over a very wide area, although a significant portion eventually ended up in two deep, fine sediment 'sinks'. A wide range of fish and shellfish over a fairly large area became contaminated with oil, resulting in the imposition of a Fisheries Exclusion Zone. Farmed salmon held in sea cages in the surface waters within this zone bore the brunt of the contamination since they could not escape the cloud of dispersed oil. Although this contamination was lost quickly once clean water conditions returned, millions of salmon that could not be marketed had to be destroyed. The Exclusion Zone was progressively lifted as fish and shellfish species were found by chemical analysis and taste testing to be free of contamination, although it was still in place over 6 years after the spill for mussels and Norway lobsters at some sites within the closure area. The BRAER spill was unusual in that a significant amount of oil was blown on to land adjacent to the wreck site. The effects of this airborne oil were localised and had no more than a temporary impact on vegetation and livestock. Seabird casualties were also relatively low. Considering the size of the spill, the environmental impacts were surprisingly limited.\",\n            \"name\": \"Braer\",\n            \"oil_amount\": 85000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"model\": \"human_impact\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact by Count Density",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cb5f5c3-48ce-41d0-9a2c-f23a08488bed",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish', 'model'];\r",
									"    pm.expect(data.subcategory).to.eql('plastic_pollution')\r",
									"    pm.expect(data.count_density_2).to.eql(1510.37)\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Keys in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?CD_1_min=0&CD_1_max=10&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "CD_1_min",
									"value": "0",
									"description": "Minimum amount of plastic particles, in km^-2"
								},
								{
									"key": "CD_1_max",
									"value": "10",
									"description": "Maximum amount of plastic particles, in km^-2"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Get human impact by count density, representing plastic pollution in an area of water, in km^-2"
					},
					"response": [
						{
							"name": "Get Human Impact by Count Density",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?CD_1_min=0&CD_1_max=10&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "CD_1_min",
											"value": "0",
											"description": "Minimum amount of plastic particles, in km^-2"
										},
										{
											"key": "CD_1_max",
											"value": "10",
											"description": "Maximum amount of plastic particles, in km^-2"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:56:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "699"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 241,\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 15,\n            \"category\": \"pollution\",\n            \"subcategory\": \"plastic_pollution\",\n            \"latitude\": 24.36,\n            \"longitude\": -62.81,\n            \"date\": \"12/1/2010\",\n            \"description\": null,\n            \"name\": null,\n            \"oil_amount\": null,\n            \"count_density_1\": 0,\n            \"count_density_2\": 1510.37,\n            \"count_density_3\": 704.84,\n            \"count_density_4\": 0,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"model\": \"human_impact\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Human Impact with Sort and Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "518181b2-1390-4484-9187-35b6632e8082",
								"exec": [
									"pm.test(\"Check Data in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const data = jsonData.data[0];\r",
									"    const keys = ['id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'location', 'fish', 'model'];\r",
									"    pm.expect(data.name).to.eql('Odyssey')\r",
									"    pm.expect(data.subcategory).to.eql('tanker_oil_spills')\r",
									"});\r",
									"pm.test(\"Check Returned Number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const num = jsonData.total_impact_returned;\r",
									"    pm.expect(num).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check Keys in Response Body\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0]).that.has.all.keys('id', 'category', 'subcategory', 'latitude', 'longitude', 'date','description','name','oil_amount', 'count_density_1','count_density_2','count_density_3', 'count_density_4','plant_rating','plant_location', 'plant_water_source', 'model')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/human?sort=subcategory&ascending=true&subcategory=tanker_oil_spills&limit=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"human"
							],
							"query": [
								{
									"key": "sort",
									"value": "subcategory",
									"description": "The attribute you want to sort by"
								},
								{
									"key": "ascending",
									"value": "true",
									"description": "Ascending option for sorting (true by default)"
								},
								{
									"key": "subcategory",
									"value": "tanker_oil_spills",
									"description": "The subcategory of human impact to return"
								},
								{
									"key": "limit",
									"value": "1",
									"description": "Maximum number of entries to return"
								}
							]
						},
						"description": "<h6> For impact we can sort by </h6>\n<ul>\n    <li>name</li>\n    <li>long</li>\n    <li>lat</li>\n    <li>subcategory</li>\n    <li>count_density_1</i>\n</ul>\nAll the ones with numeric ranges you need to specify both a maximum and maximum for the api call. The names of the min and max are listed below.\n<h6>For impact we can filter by</h6>\n<ul>\n    <li>subcategory</li>\n    <li>long (long_min and long_max)</li>\n    <li>lat (lat_min and lat_max)</li>\n    <li>CD_1 (CD_1_min and CD_1_max)</li>\n    <li>oil_amount (oil_amount_min and oil_amount_max)</li>\n</ul>"
					},
					"response": [
						{
							"name": "Get Human Impact with Sort and Filter",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/human?sort=subcategory&ascending=true&subcategory=tanker_oil_spills&limit=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"human"
									],
									"query": [
										{
											"key": "sort",
											"value": "subcategory",
											"description": "The attribute you want to sort by"
										},
										{
											"key": "ascending",
											"value": "true",
											"description": "Ascending option for sorting (true by default)"
										},
										{
											"key": "subcategory",
											"value": "tanker_oil_spills",
											"description": "The subcategory of human impact to return"
										},
										{
											"key": "limit",
											"value": "1",
											"description": "Maximum number of entries to return"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 04 Nov 2020 01:57:07 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1388"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.9.0"
								}
							],
							"cookie": [],
							"body": "{\n    \"total_impact_count\": 241,\n    \"total_impact_returned\": 1,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"category\": \"pollution\",\n            \"subcategory\": \"tanker_oil_spills\",\n            \"latitude\": 42.8115,\n            \"longitude\": -61.8288,\n            \"date\": \"10/11/1998\",\n            \"description\": \"On November 10th 1988, the Liberian tanker ODYSSEY, almost fully loaded with a cargo of 132, 157 tonnes of North Sea Brent crude oil, broke into two and sank in heavy weather in the North Atlantic 700 miles off the coast of Nova Scotia while on voyage from Sullom Voe, Shetland Islands to Come by Chance, Newfoundland.  Fire started on the stern section as it sank and the surrounding oil caught fire. Due to the rough weather conditions, the Canadian Coast Guard was only able to come within 1.75 miles of the vessel whilst on fire. As the incident occurred 700 miles from the nearest coastline, there were no concerns about pollution as the oil was expected to dissipate naturally.\",\n            \"name\": \"Odyssey\",\n            \"oil_amount\": 132000,\n            \"count_density_1\": null,\n            \"count_density_2\": null,\n            \"count_density_3\": null,\n            \"count_density_4\": null,\n            \"plant_rating\": null,\n            \"plant_location\": null,\n            \"plant_water_source\": null,\n            \"model\": \"human_impact\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Contains Human Impact/Effect Related requests/queries\r\n\r\n**Description of Return Types**\r\n\r\n\"total_impact_count\" = total number of human impacts in database\r\n\r\n\"total_impact_returned\" = total number of instances returned\r\n\r\n\"id\" = the id of the impact\r\n\r\n\"category\" = category of the impact\r\n\r\n\"subcategory\" = subcategory of the impact\r\n\r\n\"latitude\" = latitude coordinate of impact\r\n\r\n\"longitude\" = longitude coordinate of impact\r\n\r\n\"date\" = date impact occurred\r\n\r\n\"description\" = description of impact\r\n\r\n\"name\" = name associated with impact\r\n\r\n\"oil amount\" = amount of oil spilled (if applicable)\r\n\r\n\"count_density_1\" = density of 0.33-1.00mm sized plastic pieces\r\n\r\n\"count_density_2\" = density of 1.01-4.75mm sized plastic pieces\r\n\r\n\"count_density_3\" = density of 4.76-200mm sized plastic pieces\r\n\r\n\"count_density_4\" = density of 200+mm sized plastic pieces\r\n\r\n\"plant_rating\" = rating for the power plant\r\n\r\n\"plant_location\": = location of power plant\r\n\r\n\"plant_water_source\": = water source of power plant\r\n\r\n\"catch_year\" = year the catch rate data was recorded\r\n\r\n\"location\" = array of location ids that are related to this impact\r\n\r\n\"fish\" = array of fish ids that are related to impact",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fae4e7ba-beaa-42d2-9077-cee05651d178",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "65ee53f2-864e-4da7-a57c-2fdc40a8783e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check Response Body\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.any.keys('data');",
							"});",
							"",
							"",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7f795792-f8fe-4d67-89eb-f291290df728",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3fcceb49-90f4-468e-ba96-05e7b30be2fe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "654a1d7a-2bb9-40fc-8b45-a6cf125dd711",
			"key": "base_url",
			"value": "https://www.conservocean.me"
		}
	],
	"protocolProfileBehavior": {}
}